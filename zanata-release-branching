#!/bin/bash -e
### NAME
###     zanata-release-branching - Do branching for big release (non-point release).
###
### SYNOPSIS
###     zanata-release-branching <module> <DevelopmentVersion>
### 
### DESCRIPTION
###     This script performs branching chores for big releases of
###     zanata-client and zanata-server.
### 

shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "${FunctionScriptFile}"
trap exit_print_error EXIT
ProgramName=$(basename $0)

print_status -t "parse" -s "Start"

if [ $# -ne 2 ];then
    zanata_script_help $0
    exit ${EXIT_FATAL_INVALID_OPTIONS}
fi

## Get Module
ModuleResult=$(get_module_from_command $1)
echo "ModuleResult=$ModuleResult"
Module=$(sed -e 's/ .*//'<<<"$ModuleResult")
if [[ $ModuleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

DevelopmentVersion=$1

##=== prepare Start ===
print_status -t prepare -s "Start"

ensure_repo ${Module}
cd ${WORK_ROOT}/${Module}
git fetch -p
git clean -f -d
declare -A hasBranch

## Determine DEVEL_BRANCH
: ${DEVEL_BRANCH:=$(get_devel_branch $Module)}
hasBranch[devel]=$DEVEL_BRANCH
print_status " DEVEL_BRANCH for $Module is ${hasBranch[devel]}"  
git checkout ${hasBranch[devel]}
git pull
git reset --hard "origin/${hasBranch[devel]}"

print_status " Determine branches to process"

for b in legacy release ;do
    case $(does_branch_exist ${Module} $b) in
	yes )
	    git checkout $b
	    ;;
	remote )
	    git checkout --track origin/$b
	    ;;
	* )
	    continue
	    ;;
    esac
    print_status "  match branch $b with origin for ${Module}"
    git pull
    git reset --hard origin/$b
    hasBranch[$b]=$b
done

if [ "${hasBranch[release]}" = "" ];then
    failed $EXIT_RETURN_FALSE "No release branch, skip"
fi

print_status " Done"

##=== branching Start ===
if [ ! "${hasBranch[legacy]}" = "" ];then
    print_status -t "release->legacy" -s "Start"
    git checkout "${hasBranch[legacy]}"
    print_status " Point 'legacy' at previous 'release'"
    
    if ! git merge "origin/${hasBranch[release]}" --ff-only; then
	print_status " [FATAL] please check for cherry-picked commits in legacy which were never merged into release"
	exit ${EXIT_FATAL_FAIL}
    fi

    print_status " Done"
fi

print_status -t "${DEVEL_BRANCH}->release" -s "Start"
git checkout "${hasBranch[release]}"
print_status " Point 'release' at local $DEVEL_BRANCH"
if ! git merge $DEVEL_BRANCH --ff-only; then
    EXIT_MSG=" Please check for cherry-picked commits in release which were never merged into $DEVEL_BRANCH"
    exit ${EXIT_FATAL_FAIL}
fi

print_status -t "Final" -s "Start"
print_status " Update $DEVEL_BRANCH version"
git checkout $DEVEL_BRANCH

mvn release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${DevelopmentVersion}
git commit -m "[$ProgramName] development version is now ${DevelopmentVersion}" -- **/pom.xml

print_status " Push all the changes back"
git push origin ${hasBranch[@]}

cat>/dev/stderr<<END
Please remember to announce the branching in IRC and zanata-devel.
END
