#!/bin/bash -e
### NAME
###     zanata-release-branching - Do branching for big release (non-point release).
###
### SYNOPSIS
###     zanata-release-branching <module> <developmentVersion>
### 
### DESCRIPTION
###     This script performs branching chores for big releases of
###     zanata-client and zanata-server.
### 

SCRIPT_DIR=$(dirname $(readlink  -q -f $0))
FUNCTION_SCRIPT_FILE=${SCRIPT_DIR}/zanata-functions
source "${FUNCTION_SCRIPT_FILE}"
trap exit_print_error EXIT
PROGRAM_NAME=$(basename $0)

if [ $# -ne 2 ];then
    zanata_script_help $0
    exit ${EXIT_FATAL_INVALID_OPTIONS}
fi

Module=$1
developmentVersion=$2
shift 2

##=== prepare Start ===
print_status -t prepare -s "Start"

ensure_repo ${Module}
cd ${WORK_ROOT}/${Module}
git fetch

print_status " Check the branches exist"
for b in origin/release origin/integration/master ;do
    if ! does_branch_exist ${Module} $b ; then
	print_status " ${Module} does not have $b !"
	exit ${EXIT_FATAL_MISSING_DEPENDENCY}
    fi
done

print_status " Clean up local branch"
git checkout integration/master
for b in legacy release ;do
    if does_branch_exist ${Module} $b ; then
	echo_stderr "### [prepare] clean $b for ${Module}"
	git branch -D $b
	git checkout --track origin/$b
    fi
done

pushRepo=()
print_status " Done"

if does_branch_exist ${Module} origin/legacy ; then
    print_status -t "release->legacy" -s "Start"
    print_status " Point 'legacy' at previous 'release'"
    if ! git merge origin/release --ff-only; then
	print_status " [FATAL] please check for cherry-picked commits in legacy which were never merged into release"
        exit ${EXIT_FATAL_FAIL}
    fi

    pushRepo+=(legacy)
    print_status " Done"
fi

print_status -t "integration/master->release" -s "Start"
print_status " Point 'release' at local integration/master"
if ! git merge integration/master --ff-only; then
    EXIT_MSG=" Please check for cherry-picked commits in release which were never merged into integration/master"
    exit ${EXIT_FATAL_FAIL}
fi
pushRepo+=(release)
print_status " Done"

print_status -t "Final" -s "Start"
print_status " Update integration/master version"
git checkout integration/master
mvn release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${developmentVersion}
git commit pom.xml */pom.xml -m "prepare for next development iteration"
pushRepo+=(integration/master)

print_status " Push all the changes back"
git push origin ${pushRepo[@]}

cat>/dev/stderr<<END
Please remember to announce the branching in IRC and zanata-devel.
END
