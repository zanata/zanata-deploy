#!/bin/bash
### NAME
###     zanata-release-branching - Do branching for big release (non-point release).
###
### SYNOPSIS
###     zanata-release-branching [Options] <module> <DevelopmentVersion>
###
### DESCRIPTION
###     This script performs branching chores for big releases of
###     zanata-platform.
###
###     If branching succeeds and is pushes to GitHub, it returns EXIT_OK
###     If branching succeeds but not pushed to GitHub,
###     it returns EXIT_RETURN_FALSE.
export LC_ALL=C
set -eu
shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "$FunctionScriptFile"
trap exit_print_error EXIT

##=== parsing Start ===
print_status -t parsing -s "Start"

BatchMode=0
JustUseCurrentDirectoryMode=0
OverwrittenLegacy=1
PushMode=0

###
### OPTIONS
while getopts "hBjlp" opt;do
    case $opt in
###
###     -h: Show this help
        h )
            zanata_script_help $0
            exit ${EXIT_OK}
            ;;
###
###     -B: Batch mode
###         It will NOT ask question and proceed with default choice.
        B )
            BatchMode=1
            ;;
###
###     -j: Just use current directory
###         This assumes that current directory is <module> work directory,
###         and correct branch is checked out.
        j )
            JustUseCurrentDirectoryMode=1
            ;;
###
###     -l: Legacy branch will be overwritten by release branch
        l )
            OverwrittenLegacy=0
            ;;
###
###     -p: Push after commit
###         Git push when it has commit.
        p )
            PushMode=1
            ;;

        * )
            failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
            ;;
    esac
done
shift $((OPTIND-1))

export JustUseCurrentDirectoryMode

## Get Module
branch_prepare master "$@"
print_status " Module=$Module"
shift $ShiftOffset

## Get DevelopmentVersion
if [[ -z ${1-} ]];then
    failed ${EXIT_FATAL_INVALID_OPTIONS} "Need <developmentVersion>"
fi
DevelopmentVersion=$1

if [[ $JustUseCurrentDirectoryMode -eq 0 ]];then
    cd ${WORK_ROOT}/${Module}
fi
ArtifactId=$(get_artifact_id $Module)

##=== prepare Start ===
print_status -t prepare -s "Start"

print_status " Match master to remote"
git pull
git reset --hard "origin/master"

declare -A hasBranch

print_status " Determine branches to process"
for b in legacy release ;do
    if [[ OverwrittenLegacy -eq 0 && $b = 'legacy' ]]; then
        continue
    fi
    case $(does_branch_exist $b) in
        yes )
            git checkout $b
            ;;
        remote )
            git checkout --track origin/$b
            ;;
        * )
            continue
            ;;
    esac
    print_status "  match branch $b with origin for ${Module}"
    git pull
    git reset --hard origin/$b
    hasBranch[$b]=$b
done

if [ "${hasBranch[release]-}" = "" ];then
    failed $EXIT_RETURN_FALSE "No release branch, skip"
fi

##=== branching Start ===
if [[ OverwrittenLegacy -eq 1 && ! "${hasBranch[legacy]-}" = "" ]];then
    print_status -t "release->legacy" -s "Start"
    git checkout "${hasBranch[legacy]}"
    print_status " Point 'legacy' at previous 'release'"

    if ! git merge "origin/${hasBranch[release]}" --ff-only; then
        print_status " [FATAL] please check for cherry-picked commits in legacy which were never merged into release"
        exit ${EXIT_FATAL_FAIL}
    fi

    print_status " Done"
fi

print_status -t "master->release" -s "Start"
git checkout "${hasBranch[release]}"
print_status " Point 'release' at local master"
if ! git merge master --ff-only; then
    EXIT_MSG=" Please check for cherry-picked commits in release which were never merged into master"
    exit ${EXIT_FATAL_FAIL}
fi

print_status -t "Final" -s "Start"
print_status " Update master version"
git checkout master

mvn versions:set -pl build-tools,parent -DnewVersion=$DevelopmentVersion

if ! git diff --exit-code ;then
    if [ $BatchMode -eq 0 ];then
        read -p "### Press [Ctrl-C] to break, [Enter] to continue"
    fi
    git commit -a -m "chore(version): development version is now ${DevelopmentVersion}"
    if [ $PushMode -ge 1 ];then
        print_status " Push all the changes back"
        git push origin master "${hasBranch[@]}"
    else
        exit ${EXIT_RETURN_FALSE}
    fi
else
    print_status " No change detected"
fi

cat>/dev/stderr<<END
Please remember to announce the branching in IRC and zanata-devel.
END
