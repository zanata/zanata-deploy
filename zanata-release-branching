#!/bin/bash -e
### NAME
###     zanata-release-branching - Do branching for big release (non-point release).
###
### SYNOPSIS
###     zanata-release-branching <module> <DevelopmentVersion>
### 
### DESCRIPTION
###     This script performs branching chores for big releases of
###     zanata-client and zanata-server.
### 

shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "${FunctionScriptFile}"
trap exit_print_error EXIT
ProgramName=$(basename $0)

print_status -t "parse" -s "Start"

if [ $# -ne 2 ];then
    zanata_script_help $0
    exit ${EXIT_FATAL_INVALID_OPTIONS}
fi

## Get Module
ModuleResult=$(get_module_from_command $1)
echo "ModuleResult=$ModuleResult"
Module=$(sed -e 's/ .*//'<<<"$ModuleResult")
if [[ $ModuleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

DevelopmentVersion=$1

##=== prepare Start ===
print_status -t prepare -s "Start"

ensure_repo ${Module}
cd ${WORK_ROOT}/${Module}
git fetch
git clean -f -d

## Determine DEVEL_BRANCH
: ${DEVEL_BRANCH:=$(get_devel_branch $Module)}
print_status " DEVEL_BRANCH for $Module is $DEVEL_BRANCH"  

print_status " Check the release branch exist"
for b in origin/release ;do
    if ! does_branch_exist ${Module} $b ; then
	print_status " ${Module} does not have $b !"
	exit ${EXIT_FATAL_MISSING_DEPENDENCY}
    fi
done

print_status " Checkout and pull $DEVEL_BRANCH"
git checkout $DEVEL_BRANCH
git pull
git reset --hard origin/$DEVEL_BRANCH
for b in legacy release ;do
    if does_branch_exist ${Module} $b ; then
	echo_stderr "### [prepare] match branch $b with origin for ${Module}"
	git checkout --track origin/$b
	git pull
	git reset --hard origin/$DEVEL_BRANCH
    fi
done


PushRepoArray=()
print_status " Done"

if does_branch_exist ${Module} origin/legacy ; then
    print_status -t "release->legacy" -s "Start"
    print_status " Point 'legacy' at previous 'release'"
    if ! git merge origin/release --ff-only; then
	print_status " [FATAL] please check for cherry-picked commits in legacy which were never merged into release"
        exit ${EXIT_FATAL_FAIL}
    fi

    PushRepoArray+=(legacy)
    print_status " Done"
fi

print_status -t "${DEVEL_BRANCH}->release" -s "Start"
print_status " Point 'release' at local $DEVEL_BRANCH"
if ! git merge $DEVEL_BRANCH --ff-only; then
    EXIT_MSG=" Please check for cherry-picked commits in release which were never merged into $DEVEL_BRANCH"
    exit ${EXIT_FATAL_FAIL}
fi
PushRepoArray+=(release)

print_status -t "Final" -s "Start"
print_status " Update $DEVEL_BRANCH version"
git checkout $DEVEL_BRANCH

mvn release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${DevelopmentVersion}
git commit -m "[$ProgramName] prepare for next development iteration" -- **/pom.xml
PushRepoArray+=($DEVEL_BRANCH)

print_status " Push all the changes back"
git push origin ${PushRepoArray[@]}

cat>/dev/stderr<<END
Please remember to announce the branching in IRC and zanata-devel.
END
