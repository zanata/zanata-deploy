#!/bin/bash
### NAME
###     zanata-maven-release - Release in maven
###
### SYNOPSIS
###     zanata-maven-release [options] <RepoName>
###     zanata-maven-release-assets    [options]
###     zanata-maven-release-platform    [options]
###
### DESCRIPTION
###     This program does maven release, as well as tag the release version.
###
### It does following:
###    1. Checkout correct branch, ( -j to skip this)
###    2. Do pre-release tasks ( -Q to skip this)
###       This incluldes update org.zanata dependency, pull translation,
###       and insert release-notes
###    3. Set the new release version in pom.
###    4. mvn verify the project
###    5. mvn deploy to sonatype or cloudbee
###    6. release in sonatype
###    7. Set the next development version.
###
### EXAMPLES
###   1. For point release, if you are confident and want to release directly in
###      release branch, run:
###
###      zanata-maven-release -r 4.0.1 -d 4.0.2-SNAPSHOT platform
###
###   2. If you prefer to work in the development branch, first checkout that branch,
###      then run:
###
###      zanata-maven-release -j -r 4.1.0 -d 4.1.1-SNAPSHOT platform
###
###   Note that if the development version is just snapshot of last number add one, then
###      -d <version>-SNAPSHOT can be omitted
###
### ENVIRONMENT
###     ZANATA_RELEASE_MODE:
###         <empty>  : Default mode. Builds, deploy to nexus staging, and push changes
###                to source control
###         testBuild: Builds,  deploy to nexus staging, but does not push changes to
###                source control
###         dryRun   : Only show command to be run.
###
###         Note that option -n (dryRun) and -T (testBuild) override this.
: ${ZANATA_RELEASE_MODE:=}
###
export LC_ALL=C
set -eu
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "$FunctionScriptFile"
trap exit_print_error EXIT

## Maven options are defined in zanata-env.sh

##=== parsing Start ===
print_status -t parsing -s "Start"

WorkingBranch=
DevelopmentVersion=
DryRunMode=0
JustUseCurrentDirectoryMode=0
PullRequestMode=0
QuickMode=0
UpdateDependencies=0
UpdateReleaseNotes=1
UpdateTranslations=0
ReleaseVersion=

###
### OPTIONS
###

while getopts "hd:jnPQr:tT" opt;do
    case $opt in
###     -h: Show this help
        h )
            zanata_script_help $0
            exit ${EXIT_OK}
            ;;
###
###     -d <developmentVersion>:
###         Development Vesion like: 4.1.0-SNAPSHOT
###         Default: <release version+1>-SNAPSHOT
        d )
            DevelopmentVersion=$OPTARG
            ;;
###
###     -j: Just use current directory (no git checkout)
###         This assumes that current directory is repo work directory.
###         and correct branch is checked out.
        j )
            JustUseCurrentDirectoryMode=1
            ;;
###
###     -n: Dry-run mode.
###         Just show what would be done.
        n )
            DryRunMode=1
            ZANATA_RELEASE_MODE=dryRun
            ;;
###
###     -P: Working on pull request branch
###         pr-<artifactId>-<version>
        P )
            PullRequestMode=1
            ;;
###
###     -Q:
###         Quick mode that skip prepare steps.
###         Prepare steps include update dependency, translation,
###         and release-notes prepend.
        Q )
            UpdateTranslations=0
            UpdateDependencies=0
            UpdateReleaseNotes=0
            ;;
###
###     -r <releaseVersion>
###         Release Vesion like: 4.2.4
        r )
            ReleaseVersion=$OPTARG
            ;;
###
###     -t
###         Pull translations
        t )
            UpdateTranslations=1
            ;;
###
###     -T: testBuild mode
###         This script builds and deploy artifacts to nexus staging,
###         but does not push changes to source control.
        T )
            ZANATA_RELEASE_MODE=testBuild
            ;;
        * )
            failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
            ;;
    esac
done
export JustUseCurrentDirectoryMode
export ZANATA_RELEASE_MODE
if [[ $ZANATA_RELEASE_MODE == dryRun ]]; then
    DryRunMode=1
fi
export DryRunMode

shift $((OPTIND-1))

## Get RepoName
branch_prepare RELEASING "$@"
shift $ShiftOffset
print_status " RepoName=$RepoName"

## Get DevelopmentVersion
if [[ -z $DevelopmentVersion ]]; then
    DevelopmentVersion="$(version_next $ReleaseVersion)-SNAPSHOT"
fi

## Final parsing check
if [ "$RepoName" = "zanata-assets" ];then
    if [ -z "$ReleaseVersion" ];then
        failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -r <releaseVersion>"
    fi
    if [ -z "$DevelopmentVersion" ];then
        failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -d <developmentVersion>"
    fi
fi

ArtifactId=$(get_artifact_id $RepoName)

if [ $JustUseCurrentDirectoryMode -eq 0 ];then
    cd ${WORK_ROOT}/${RepoName}

    ## Merge with origin
    print_status " Branch ${WorkingBranch}: merge origin/$WorkingBranch"
    git merge origin/$WorkingBranch --ff-only --quiet
fi

if [ $PullRequestMode -eq 1 ];then
    WorkingBranch="pr-$ArtifactId-$ReleaseVersion"
    if ! branch_does_exist $WorkingBranch ;then
        git branch $WorkingBranch
    fi
    git checkout $WorkingBranch
    print_status " Working on the pull request branch: $WorkingBranch"
fi

##=== prepare  Start ===
print_status -t prepare -s "Start"
## Invoke gpg-agent by signing an space string
## gpg2 is needed here, as in Fedora, gpg means gpg 1
gpg2 --clearsign <<<" "

##==== Update Dependencies ====
if [[ $UpdateDependencies -eq 1 ]];then
    print_status " Update dependencies"
    set +e
    run_command $ScriptDir/zanata-version-update -j
    case $? in
        $EXIT_OK )
            ;;
        $EXIT_RETURN_FALSE )
            ;;
        * )
            failed $? "Failed to version update"
            ;;
    esac
    set -e
fi

##==== Update translations ====
if [[ $UpdateTranslations -eq 1 && ( -r zanata.xml || -r server/zanata.xml ) ]];then
    print_status " Update Zanata translation"
    set +e
    run_command $ScriptDir/zanata-translate-pull -j
    case $? in
        $EXIT_OK )
            ;;
        $EXIT_RETURN_FALSE )
            ;;
        * )
            failed $? "Failed to pull translation"
            ;;
    esac
    set -e
fi

##==== release-notes-prepend ====
if [[ $UpdateReleaseNotes -eq 1 && -r docs/release-notes.md ]];then
    print_status " release-notes-prepend"
    ## Remove -alpha-???
    ReleaseNoteVersion=${ReleaseVersion%%-*}
    set +e
    run_command zanata-release-notes-prepend -j $ArtifactId $ReleaseNoteVersion
    set -e
    case $ExitCode in
        $EXIT_OK )
            ;;
        $EXIT_FATAL_MISSING_DEPENDENCY )
            # This usually means the repo does not have docs/release-notes.md
            ;;
        $EXIT_FATAL_UNKNOWN_MODULE )
            # This usually means that <ArtifactId-$ReleaseVersion> does note exist in Jira
            ;;
        $EXIT_RETURN_FALSE )
            # No Jira issues associates to the <ArtifactId-$ReleaseVersion>
            ;;
        * )
            failed $ExitCode " Failed to get related jira issues"
            ;;
    esac
fi

##=== release  Start ===
## Incline to versions plugin instead of release-plugin
## zanata-assets does not work is release-plugin anyway.
print_status -t release -s "Start"

MavenVersionProjects=
NexusReleaseProjects=
TagPrefix=
NexusStagingRepositoryPrefix=
case $RepoName in
    zanata-platform )
        ## chooses projects whose versions should be changed
        ## eg: -pl build-tools,parent
        MavenVersionProjects="$PLATFORM_MAVEN_VERSION_PROJECT"

        ## List all artifacts to be released in sonatype nexus
        ## e.g. !server/zanata-test-war,!server/functional-test
        NexusReleaseProjects="$PLATFORM_MAVEN_NEXUS_RELEASE_PROJECTS"

        ## the prefix for the git tag, eg platform-
        TagPrefix="${ArtifactId}-"

        NexusStagingRepositoryPrefix='orgzanata'
        ;;
    openprops )
        NexusStagingRepositoryPrefix='org.zanata'
        ;;
    * )
        ;;
esac

## Set pom.xml version to release version $ReleaseVersion
print_status " Set pom.xml version to release version $ReleaseVersion"
$ScriptDir/zanata-pom-set-version "$TagPrefix" "$ReleaseVersion" "$MavenVersionProjects"

## Build & Deploy to Nexus Staging
print_status " deploy to nexus staging"
#$ScriptDir/zanata-nexus "$NexusReleaseProjects"
$ScriptDir/zanata-nexus-staging "$NexusReleaseProjects"

## Release staged artifacts from Nexus Staging
## after which they will be synced to Maven Central
print_status " Release staged artifacts from Nexus Staging"
$ScriptDir/zanata-nexus-release -b "$WorkingBranch" -s "$NexusStagingRepositoryPrefix" -p "$NexusReleaseProjects"

##  Set pom.xml version to next SNAPSHOT version $DevelopmentVersion
##  e.g. 4.6.0-SNAPSHOT
print_status " Set pom.xml version to SNAPSHOT version $DevelopmentVersion"
$ScriptDir/zanata-pom-set-version "$TagPrefix" "$DevelopmentVersion" "$MavenVersionProjects"

if [[ -z $ZANATA_RELEASE_MODE ]]; then
    ## Push the SNAPSHOT commit
    run_command git push --follow-tags origin $WorkingBranch
fi

