#!/bin/bash -eu
### NAME
###     zanata-maven-release - Release in maven
###
### SYNOPSIS
###     zanata-maven-release [options] <Module>
###     zanata-maven-release-assets    [options]
###     zanata-maven-release-platform    [options]
###
### OPTIONS
###     -h: Show this help
###
###     -d <developmentVersion>:
###         Development Vesion like: 3.10.0-SNAPSHOT
###
###     -j: Jenkins mode.
###         This assumes that current directory is <module> work directory.
###         and correct branch is checked out.
###
###     -n:
###         Dry-run
###
###     -P: Working on pull request branch
###         pr-<artifactId>-<version>
###
###     -Q:
###         Quick mode. It skips dry-run and only does the real build.
###
###     -r <releaseVersion>
###         Release Vesion like: 3.9.0
###
### DESCRIPTION
###     This program does maven release, as well as tag the release version.
###
### It does following:
###    1. Checkout correct branch, ( -j to skip this)
###    2. Do pre-release tasks ( -Q to skip this)
###       This incluldes update org.zanata dependency, pull translation,
###       and insert release-notes
###    3. Set the new release version in pom.
###    4. mvn verify the project
###    5. mvn deploy to sonatype or cloudbee
###    6. release in sonatype
###    7. Set the next development version.
###
### EXAMPLES
###   1. For point release, if you are confident and want to release directly in
###      release branch, run:
###
###      zanata-maven-release -r <releaseVer> -d <developmentVer> <artifact>
###
###   2. If you prefer to work in the development branch, first checkout that branch,
###      then run:
###
###      zanata-maven-release -j -r <releaseVer> -d <developmentVer> <artifact>
###
### ENVIRONMENT
###     RELEASING_BRANCH
###       The branch that we recommend downstream to use, and
###       release process should mainly happen here.
###       It is:
###          'release' if that branch exists; otherwise 'master'
###

ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "$FunctionScriptFile"
trap exit_print_error EXIT

## Options that will be run in forked build
## i.e options that will be passed as -Darguments for maven-release-plugin
MavenReleaseForkedArgumentArray=( -e -Dgwt.validateOnly -DskipTests -DskipArqTests -DskipFuncTests -Dfindbugs.skip)

## Maven options
MavenOptionArray=( "${MavenReleaseForkedArgumentArray[@]}" -Doptimise -Dmaven.repo.local=$REPO_LOCAL_DIR -Dgpg.useagent -DupdateReleaseInfo=true -Dresume=false "-Darguments=${MavenReleaseForkedArgumentArray[*]}" -Doptimise)

###
###     NEXUS_STAGING_OPTIONS
###       The maven options for nexus plugin
: ${NEXUS_STAGING_OPTIONS:="-e -DnexusUrl=https://oss.sonatype.org/ -DserverId=sonatype-nexus-staging -Prelease"}

NEXUS_STAGING_PLUGIN=org.sonatype.plugins:nexus-staging-maven-plugin
MAVEN_RELEASE_PLUGIN=org.apache.maven.plugins:maven-release-plugin:2.5

##=== function definitions Start ===
function nexus_release(){
    print_status -t nexus-release -s "Start"

    StagingRepositoryBuffer=$(mvn $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:rc-list | sed -n  -e '/orgzanata-.* / p' )
    StagingRepositoryId=$( awk '{print $2}' <<<"$StagingRepositoryBuffer" | tail -n 1)
    StagingRepositoryState=$( awk '{print $3}' <<<"$StagingRepositoryBuffer" | tail -n 1)
    StagingPropertiesGlob="target/checkout/target/nexus-staging/staging/*.properties"

    if [ -z "$StagingRepositoryId" ];then
	#TODO: Maybe because it has not yet been deployed
	if [ -e $StagingPropertiesGlob ];then
	    StagingRepositoryId=$(grep -oP '^stagingRepository\.id=\K.*' $StagingPropertiesGlob )
	    test -n "$StagingRepositoryId"
	    exit_if_failed $? $EXIT_FATAL_FAIL " Cannot obtain staging repository id from both nexus-staging plugin and local target files"
	else
	    print_status " Failed to found either stagingRepositoryId or $StagingPropertiesGlob"
	    print_status " Please try to manually submit nexus manually"
	    print_status " Steps:"
	    print_status "   1. git checkout <ArtifactId>-<Version>"
	    print_status "   2. mvn clean deploy -Prelease"
	    failed $EXIT_FATAL_FAILED " Failed to found either stagingRepositoryId or $StagingPropertiesGlob"
	fi
    fi

    print_status " StagingRepositoryId=${StagingRepositoryId}"

    # read -p "### Please login sonatype and check maven-metadata.xml. Press [Ctrl-C] to break, [Enter] to continue"

    if [ "$StagingRepositoryState" = "OPEN" ];then
	print_status " nexus-staging:close"
	mvn $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:close \
	    -DstagingRepositoryId=${StagingRepositoryId}

    fi

    print_status " nexus-staging:release"
    mvn $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:release \
	-DstagingRepositoryId=${StagingRepositoryId}

}
##=== function definitions End   ===

##=== parsing Start ===
print_status -t parsing -s "Start"

WorkingBranch=
DevelopmentVersion=
JenkinsMode=0
PullRequestMode=0
QuickMode=0
ReleaseVersion=

while getopts "hd:jPQr:" opt;do
    case $opt in
	h )
	    zanata_script_help $0
	    exit ${EXIT_OK}
	    ;;
	d )
	    DevelopmentVersion=$OPTARG
	    ;;
	j )
	    JenkinsMode=1
	    ;;
	P )
	    PullRequestMode=1
	    ;;
	Q )
	    QuickMode=1
	    ;;
	r )
	    ReleaseVersion=$OPTARG
	    ;;
	* )
            failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	    ;;
    esac
done
export JenkinsMode

shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command ${1-})
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

## Final parsing check
if [ "$Module" = "zanata-assets" ];then
    if [ -z "$ReleaseVersion" ];then
	failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -r <releaseVersion>"
    fi
    if [ -z "$DevelopmentVersion" ];then
	failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -d <developmentVersion>"
    fi
fi

ArtifactId=$(get_artifact_id $Module)

##=== checkout Start ===
print_status -t checkout -s "Start"
if [ $JenkinsMode -eq 1 ];then
    WorkingBranch=$(git rev-parse --abbrev-ref HEAD)
    print_status " Maven release for $Module will be operated on current branch ($WorkingBranch)"
else
    ##  Ensure repo
    ensure_repo $Module

    ## Determine RELEASING_BRANCH
    : ${RELEASING_BRANCH:=$(get_releasing_branch $Module)}
    print_status " RELEASING_BRANCH for $Module is ${RELEASING_BRANCH}"

    WorkingBranch=$RELEASING_BRANCH
    print_status " Working Branch is $WorkingBranch"
    checkout_branch $Module $WorkingBranch $WORK_ROOT
    cd ${WORK_ROOT}/${Module}

    ## Merge with origin
    print_status " Branch ${WorkingBranch}: merge origin/$WorkingBranch"
    git merge origin/$WorkingBranch --ff-only --quiet
fi

if [ $PullRequestMode -eq 1 ];then
    WorkingBranch="pr-$ArtifactId-$ReleaseVersion"
    if ! does_branch_exist $WorkingBranch ;then
	git branch $WorkingBranch
    fi
    git checkout $WorkingBranch
    print_status " Working on the pull request branch: $WorkingBranch"
fi

##=== prepare  Start ===
print_status -t prepare -s "Start"
## Invoke gpg-agent by signing an space string
## gpg2 is needed here, as in Fedora, gpg means gpg 1
gpg2 --clearsign <<<" "

if [[ $QuickMode -eq 0 ]];then
    ##==== Update Dependency ====
    print_status " Update dependency"
    set +e
    $ScriptDir/zanata-version-update -j
    case $? in
	$EXIT_OK )
	    ;;
	$EXIT_RETURN_FALSE )
	    ;;
	* )
	    failed $? "Failed to version update"
	    ;;
    esac
    set -e

    if [[ -r zanata.xml || -r server/zanata.xml ]];then
	##==== Update translations ====
	print_status " Update Zanata translation"
	set +e
	$ScriptDir/zanata-translate-pull -j
	case $? in
	    $EXIT_OK )
		;;
	    $EXIT_RETURN_FALSE )
		;;
	    * )
		failed $? "Failed to pull translation"
		;;
	esac
	set -e
    fi

    if [[ -r docs/release-notes.md ]];then
	##==== release-notes-prepend ====
	print_status " release-notes-prepend"
	set +e
	zanata-release-notes-prepend -j $ArtifactId $ReleaseVersion
	ExitCode=$?
	set -e
	case $ExitCode in
	    $EXIT_OK )
		;;
	    $EXIT_FATAL_MISSING_DEPENDENCY )
		# This usually means the module does not have docs/release-notes.md
		;;
	    $EXIT_FATAL_UNKNOWN_MODULE )
		# This usually means that <ArtifactId-$ReleaseVersion> does note exist in Jira
		;;
	    $EXIT_RETURN_FALSE )
		# No Jira issues associates to the <ArtifactId-$ReleaseVersion>
		;;
	    * )
		failed $ExitCode " Failed to get related jira issues"
		;;
	esac
    fi
fi

##=== release  Start ===
## Incline to versions plugin instead of release-plugin
## zanata-assets does not work is release-plugin anyway.
print_status -t release -s "Start"

## Make sure no other files get involved
git clean -f -d -x

case $Module in
    zanata-platform )
	MavenOptionArray+=( -pl build-tools,parent )
	;;
    * )
	;;
esac

## Set to release version
print_status " Set release version to $ReleaseVersion"
sed -i -e 's|<tag>HEAD</tag>|<tag>'$ArtifactId'-'$ReleaseVersion'</tag>|' $(find . -name pom.xml | xargs )
set -x
mvn "${MavenOptionArray[@]}" versions:set -DnewVersion=$ReleaseVersion
mvn scm:checkin -Dmessage="chore(version): set version ${ReleaseVersion}" -DpushChanges=false
set +x

## Deploy for release
print_status " deploy for release"
set -x
mvn "${MavenOptionArray[@]}" -Prelease -Doptimise deploy
set +x

## Release with sonatype
nexus_release

## Set to development version
print_status " Set to development version"
sed -i -e 's|<tag>.*</tag>|<tag>HEAD</tag>|' $(find . -name pom.xml | xargs )
mvn "${MavenOptionArray[@]}" -pl build-tools,parent versions:set -DnewVersion=$DevelopmentVersion
mvn -N scm:checkin -Dmessage="chore(version): new snapshot version ${DevelopmentVersion}" -pushChanges=true
set +x

