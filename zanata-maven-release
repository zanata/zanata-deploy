#!/bin/bash -eu
### NAME
###     zanata-maven-release - Release in maven
###
### SYNOPSIS
###     zanata-maven-release [options] <RepoName>
###     zanata-maven-release-assets    [options]
###     zanata-maven-release-platform    [options]
###
### DESCRIPTION
###     This program does maven release, as well as tag the release version.
###
### It does following:
###    1. Checkout correct branch, ( -j to skip this)
###    2. Do pre-release tasks ( -Q to skip this)
###       This incluldes update org.zanata dependency, pull translation,
###       and insert release-notes
###    3. Set the new release version in pom.
###    4. mvn verify the project
###    5. mvn deploy to sonatype or cloudbee
###    6. release in sonatype
###    7. Set the next development version.
###
### EXAMPLES
###   1. For point release, if you are confident and want to release directly in
###      release branch, run:
###
###      zanata-maven-release -r 4.0.1 -d 4.0.2-SNAPSHOT platform
###
###   2. If you prefer to work in the development branch, first checkout that branch,
###      then run:
###
###      zanata-maven-release -j -r 4.1.0 -d 4.1.1-SNAPSHOT platform
###
### ENVIRONMENT
###     RELEASING_BRANCH
###       The branch that we recommend downstream to use, and
###       release process should mainly happen here.
###       It is:
###          'release' if that branch exists; otherwise 'master'
###

ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "$FunctionScriptFile"
trap exit_print_error EXIT

## Options that will be run in forked build
## i.e options that will be passed as -Darguments for maven-release-plugin
MavenReleaseForkedArgumentArray=( -T 1 -e -Dgwt.validateOnly -DskipTests -DskipArqTests -DskipFuncTests -Dfindbugs.skip)

## Maven options
MavenOptionArray=( "${MavenReleaseForkedArgumentArray[@]}" -Doptimise -Dmaven.repo.local=$REPO_LOCAL_DIR -Dgpg.useagent=true -DupdateReleaseInfo=true)

###
###     NEXUS_STAGING_OPTIONS
###       The maven options for nexus plugin
: ${NEXUS_STAGING_OPTIONS:="-e -DnexusUrl=https://oss.sonatype.org/ -DserverId=sonatype-nexus-staging -Prelease"}

NEXUS_STAGING_PLUGIN=org.sonatype.plugins:nexus-staging-maven-plugin

##=== function definitions Start ===
## run_command <command> [args ... ]
##     On Dry-run mode, just show the command,
##     otherwise run the command.
function run_command(){
    if [[ $DryRunMode -eq 1 ]];then
        print_status " [Dry-Run] $*"
    else
        set -x
        "$@"
        set +x
    fi
}

function nexus_release(){
    print_status -t nexus-release -s "Start"

    print_status " Obtaining StagingRepositoryId"
    StagingRepositoryBuffer=$(run_command ./mvnw $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:rc-list | sed -n  -e '/orgzanata-.* / p' )

    if [[ $DryRunMode -eq 0 ]];then
        [[ -z $StagingRepositoryBuffer ]] &&\
            failed $EXIT_FATAL_FAIL " Failed to find artifacts in ${NEXUS_STAGING_PLUGIN}:rc-list"

        StagingRepositoryId=$( awk '{print $2}' <<<"$StagingRepositoryBuffer" | tail -n 1)

        [[ -z $StagingRepositoryId ]] &&\
            failed $EXIT_FATAL_FAIL " Failed to obtain StagingRepositoryId"

        StagingRepositoryState=$( awk '{print $3}' <<<"$StagingRepositoryBuffer" | tail -n 1)

        [[ -z $StagingRepositoryState ]] &&\
            failed $EXIT_FATAL_FAIL " Failed to obtain StagingRepositoryState"

        print_status " StagingRepositoryId=$StagingRepositoryId StagingRepositoryState=$StagingRepositoryState"
    else
        print_status " [Dry-Run] No StagingRepositoryId, because artifact deployment is skipped"
        ## Provide pseudo Id and state for display
        StagingRepositoryId=StagingRepositoryId
        StagingRepositoryState=OPEN
    fi

    # read -p "### Please login sonatype and check maven-metadata.xml. Press [Ctrl-C] to break, [Enter] to continue"

    if [ "$StagingRepositoryState" = "OPEN" ];then
        print_status " nexus-staging:close"
        run_command ./mvnw $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:close \
            -DstagingRepositoryId=${StagingRepositoryId}

    fi

    print_status " nexus-staging:release"
    run_command ./mvnw $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:release \
        -DstagingRepositoryId=${StagingRepositoryId}

}
##=== function definitions End   ===

##=== parsing Start ===
print_status -t parsing -s "Start"

WorkingBranch=
DevelopmentVersion=
DryRunMode=0
JustUseCurrentDirectoryMode=0
PullRequestMode=0
QuickMode=0
ReleaseVersion=

###
### OPTIONS
###

while getopts "hd:jnPQr:" opt;do
    case $opt in
###     -h: Show this help
        h )
            zanata_script_help $0
            exit ${EXIT_OK}
            ;;
###
###     -d <developmentVersion>:
###         Development Vesion like: 4.1.0-SNAPSHOT
        d )
            DevelopmentVersion=$OPTARG
            ;;
###
###     -j: Just use current directory (no git checkout)
###         This assumes that current directory is repo work directory.
###         and correct branch is checked out.
        j )
            JustUseCurrentDirectoryMode=1
            ;;
###
###     -n: Dry-run mode.
###         Just show what would be done.
        n )
            DryRunMode=1
            ;;
###
###     -P: Working on pull request branch
###         pr-<artifactId>-<version>
        P )
            PullRequestMode=1
            ;;
###
###     -Q:
###         Quick mode that skip prepare steps.
###         Prepare steps include update dependency, translation,
###         and release-notes prepend.
        Q )
            QuickMode=1
            ;;
###
###     -r <releaseVersion>
###         Release Vesion like: 4.0.0
        r )
            ReleaseVersion=$OPTARG
            ;;
        * )
            failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
            ;;
    esac
done
export JustUseCurrentDirectoryMode

shift $((OPTIND-1))

## Get RepoName
branch_prepare RELEASING "$@"
shift $ShiftOffset
print_status " RepoName=$RepoName"

## Final parsing check
if [ "$RepoName" = "zanata-assets" ];then
    if [ -z "$ReleaseVersion" ];then
        failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -r <releaseVersion>"
    fi
    if [ -z "$DevelopmentVersion" ];then
        failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -d <developmentVersion>"
    fi
fi

ArtifactId=$(get_artifact_id $RepoName)

if [ $JustUseCurrentDirectoryMode -eq 0 ];then
    cd ${WORK_ROOT}/${RepoName}

    ## Merge with origin
    print_status " Branch ${WorkingBranch}: merge origin/$WorkingBranch"
    git merge origin/$WorkingBranch --ff-only --quiet
fi

if [ $PullRequestMode -eq 1 ];then
    WorkingBranch="pr-$ArtifactId-$ReleaseVersion"
    if ! does_branch_exist $WorkingBranch ;then
        git branch $WorkingBranch
    fi
    git checkout $WorkingBranch
    print_status " Working on the pull request branch: $WorkingBranch"
fi

##=== prepare  Start ===
print_status -t prepare -s "Start"
## Invoke gpg-agent by signing an space string
## gpg2 is needed here, as in Fedora, gpg means gpg 1
gpg2 --clearsign <<<" "

if [[ $QuickMode -eq 0 ]];then
    ##==== Update Dependency ====
    print_status " Update dependency"
    set +e
    run_command $ScriptDir/zanata-version-update -j
    case $? in
        $EXIT_OK )
            ;;
        $EXIT_RETURN_FALSE )
            ;;
        * )
            failed $? "Failed to version update"
            ;;
    esac
    set -e

    if [[ -r zanata.xml || -r server/zanata.xml ]];then
        ##==== Update translations ====
        print_status " Update Zanata translation"
        set +e
        run_command $ScriptDir/zanata-translate-pull -j
        case $? in
            $EXIT_OK )
                ;;
            $EXIT_RETURN_FALSE )
                ;;
            * )
                failed $? "Failed to pull translation"
                ;;
        esac
        set -e
    fi

    if [[ -r docs/release-notes.md ]];then
        ##==== release-notes-prepend ====
        print_status " release-notes-prepend"
        set +e
        run_command zanata-release-notes-prepend -j $ArtifactId $ReleaseVersion
        ExitCode=$?
        set -e
        case $ExitCode in
            $EXIT_OK )
                ;;
            $EXIT_FATAL_MISSING_DEPENDENCY )
                # This usually means the repo does not have docs/release-notes.md
                ;;
            $EXIT_FATAL_UNKNOWN_MODULE )
                # This usually means that <ArtifactId-$ReleaseVersion> does note exist in Jira
                ;;
            $EXIT_RETURN_FALSE )
                # No Jira issues associates to the <ArtifactId-$ReleaseVersion>
                ;;
            * )
                failed $ExitCode " Failed to get related jira issues"
                ;;
        esac
    fi
fi

##=== release  Start ===
## Incline to versions plugin instead of release-plugin
## zanata-assets does not work is release-plugin anyway.
print_status -t release -s "Start"

case $RepoName in
    zanata-platform )
	## List all artifacts that will be released in sonatype
	## as well as zanata-frontend, which is required for MEAD
	MavenTagProjects+=( -pl build-tools,parent)
	NexusReleaseProjects+=( -pl '!server/zanata-test-war,!server/functional-test' )
        ;;
    * )
        ;;
esac

## Set to release version
print_status " Set release version to $ReleaseVersion"
sed -i -e 's|<tag>HEAD</tag>|<tag>'$ArtifactId'-'$ReleaseVersion'</tag>|' $(find . -name pom.xml | xargs )
run_command ./mvnw "${MavenOptionArray[@]}" "${MavenTagProjects[@]}" versions:set -DnewVersion=$ReleaseVersion
run_command ./mvnw scm:checkin -Dmessage="chore(version): set version ${ReleaseVersion}" -DpushChanges=false

## Deploy for release
print_status " deploy for release"
run_command ./mvnw "${MavenOptionArray[@]}" "${NexusReleaseProjects[@]}" -Prelease -Dallow.deploy.skip=false deploy

## Release with sonatype
nexus_release

## Tag after nexus_release is completed, so you don't need to remove the tag when something wrong
run_command git tag -a -m "tag $ArtifactId-$ReleaseVersion" $ArtifactId-$ReleaseVersion

## Set to development version
print_status " Set to development version"
run_command sed -i -e 's|<tag>.*</tag>|<tag>HEAD</tag>|' $(find . -name pom.xml | xargs )
run_command ./mvnw "${MavenOptionArray[@]}" "${MavenTagProjects[@]}" versions:set -DnewVersion=$DevelopmentVersion
run_command ./mvnw -N scm:checkin -Dmessage="chore(version): new snapshot version ${DevelopmentVersion}" -DpushChanges=true

## Push the relevant tags
run_command git push --follow-tags origin $WorkingBranch

