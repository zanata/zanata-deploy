#!/bin/bash
### NAME
###     zanata-functions
###
### SYNOPSIS
###     zanata-functions [help|exit-status-help]
### 
### DESCRIPTION
###     This script is basically for source (include) from other script.
### 
### FUNCTIONS
function zanata_functions_get_path(){
    shopt -s extdebug
    declare -F zanata_functions_get_path| sed -e 's|^[^ ]* [0-9]* ||'
    shopt -u extdebug
}

function zanata_help_raw(){
    local script="$1"
    [ -z "$script" ] && script=$0
    sed -r -n -e '/^### ?/ {s|^### ?||p}' $script
}

function zanata_help_list_sections_from_string(){
    local -A idx
    for section in $(sed -n -e '/^[A-Z]/ p' <<<"$1" | xargs); do
	if [ -z "${idx[$section]}"   ];then
	    idx[$section]=1
	    echo "$section"
	fi
    done
}

###     zanata_help_list_sections <script>
function zanata_help_list_sections(){
    local script="$1"
    zanata_help_list_sections_from_string "$(zanata_help_raw $script)"
}

function zanata_help_section_from_string(){
    local section="$1"
    local buf="$2"

    local currentHeader=
    local headerPrinted=0
    IFS_BAK="${IFS}"
    IFS=''
    echo "$buf" | while read line ; do 
        ## update currentHeader
	if [[ "$line" =~ ^[A-Z].* ]];then 
	    currentHeader=$(sed -e 's/\s*$//' <<< "$line") 
	fi 

	## print if current Header is section
	if [[ "$currentHeader" = "$section" ]];then
	    ## print section header if not already
	    if [[ "$line" =~ $section\s* ]];then 
		if [ $headerPrinted -eq 0 ];then
		    headerPrinted=1
		    echo "$line"
		fi
	    else
		echo "$line"
	    fi
	fi
    done
    IFS="${IFS_BAK}"
}

###     zanata_help_section <script> <section> 
function zanata_help_section(){
    local script=$1
    local section=$2
    zanata_help_section_from_string "$section" "$(zanata_help_raw $script)"
    
}

function zanata_script_help_short(){
    local script=$1
    local buf=$(zanata_help_raw $script)
    local zanataFunc=$(zanata_functions_get_path)
    if [ "$script" != "${zanataFunc}" ];then
	buf+="
	"
	buf+=$(zanata_help_section "${zanataFunc}" "EXIT_STATUS")
	buf+="
	"
	buf+=$(zanata_help_section "${zanataFunc}" "ENVIRONMENT")
    fi

    for section in $(zanata_help_list_sections_from_string "$buf" | xargs );do
	case "$section" in
	    SYNOPSIS )
		zanata_help_section_from_string "$section" "$buf"
		echo
		;;
	    ARGUMENTS )
		zanata_help_section_from_string "$section" "$buf"
		echo
		;;
	    OPTIONS )
		zanata_help_section_from_string "$section" "$buf"
		echo
		;;
	esac
    done
}

function zanata_script_help(){
    local script=$1
    local buf=$(zanata_help_raw $script)
    local zanataFunc=$(zanata_functions_get_path)
    if [ "$script" != "${zanataFunc}" ];then
	buf+="
"
	buf+=$(zanata_help_section "${zanataFunc}" "EXIT_STATUS")
	buf+="
"
	buf+=$(zanata_help_section "${zanataFunc}" "ENVIRONMENT")
    fi

    for section in $(zanata_help_list_sections_from_string "$buf" | xargs );do
	zanata_help_section_from_string "$section" "$buf"
	echo
    done
}
    
function echo_stderr(){
    echo "$@" > /dev/stderr
}

function get_git_url(){
    echo "${ZANATA_GIT_URL_PREFIX}/$1.git"
}

###     checkout_branch <module> <branch> [parentDir]
###         checkout <branch> for <module>
function checkout_branch(){
    local module=$1
    local branch=$2
    local parentDir=$3
    [ -z $parentDir ] && parentDir=${PWD}
    pushd ${parentDir}/${module} >/dev/null
    git remote update origin
    git checkout ${branch}
    git pull
    popd >/dev/null
}


###     checkout_releasing_branch <module> [parentDir]
###         checkout RELEASING_BRANCH, the branch that we recommend downstream to use.
function checkout_releasing_branch(){
    local module=$1
    shift
    local branch=$(get_releasing_branch $module)
    checkout_branch ${module} ${branch} $@
}

###     checkout_devel_branch <module>  [parentDir]
###         checkout DEVEL_BRANCH, the branch the branch for committing new features.
function checkout_devel_branch(){
    local module=$1
    shift
    local branch=$(get_devel_branch $module)
    checkout_branch ${module} ${branch} $@
}

###
###     create_missing_dir <dir>
###         Create missing directory
function create_missing_dir(){
    local dir=$1
    if [ ! -d $dir ];then
	mkdir -p $dir
    fi
}

###
###     detect_module_tag <module>
###         Print latest tag of module
function detect_module_tag(){
    local module=$1
    ensure_repo_generic ${WORK_ROOT} ${module}

    pushd ${WORK_ROOT}/${module} >/dev/null
    checkout_releasing_branch ${module} ${WORK_ROOT} 1>/dev/stderr

    git fetch --tags 1>/dev/stderr
    local latestTag=$(git describe --abbrev=0 --tags)
    popd >/dev/null

    echo_stderr "### detect_module_version: ${module}: Latest tag: $latestTag"
    echo "${latestTag}"
}

###         
###     detect_module_version <module>
###         Print latest tagged module version.
function detect_module_version(){
    local module=$1
    ensure_repo_generic ${WORK_ROOT} ${module}

    pushd ${WORK_ROOT}/${module} >/dev/null
    checkout_releasing_branch ${module} ${WORK_ROOT} 1>/dev/stderr

    git fetch --tags 1>/dev/stderr
    local latestTag=$(git describe --abbrev=0 --tags)
    git checkout $latestTag
    local version=$(mvn -q -Dexec.executable="echo"  -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:exec)

    ## Restore branch
    checkout_releasing_branch ${module} ${WORK_ROOT} 1>/dev/stderr
    popd >/dev/null

    test -n "$version"
    exit_if_failed "$?" ${EXIT_FATAL_FAIL} "Failed to get version from ${module}"

    echo_stderr "### detect_module_version: ${module}: Version: $version"
    echo "$version"
}

###
###     does_branch_exist <module> <branch> [parentDir]
function does_branch_exist(){
    local module=$1
    local branch=$2
    local parentDir=$3
    [ -z $parentDir ] && parentDir=${WORK_ROOT}

    if [ ! -d "${parentDir}/${module}" ];then
	echo_stderr "[ERROR] ${WORK_ROOT}/${module} does not exist"
	exit ${EXIT_FATAL_MISSING_DEPENDENCY}
    fi

    pushd ${parentDir}/${module} >/dev/null
    echo_stderr -n "### Does ${module} has branch ${branch}?..."

    local ret=$EXIT_OK
    if git rev-parse --verify ${branch} &>/dev/null;then
	echo "yes" 
    elif git ls-remote --heads origin $branch | grep $branch >& /dev/null ;then
	echo "remote" 
    else
	echo "no"
	ret=${EXIT_RETURN_FALSE}
    fi
    popd >/dev/null
    return $ret
}

###
###     ensure_repo_generic <parentDir> <module> [git_repo_url]
###         Ensure repo is at <parentDir>/<module>
function ensure_repo_generic(){
    local parentDir=$1
    local module=$2
    local git_repo_url=$3
    echo_stderr "### Ensure the repo $module is at ${parentDir}/${module}"
    if [ -z "$git_repo_url" ];then
	git_repo_url=$(get_git_url ${module})
    fi
    create_missing_dir ${parentDir}
    pushd ${parentDir} >/dev/null
    if [ ! -d ${module} ];then
	git clone "${git_repo_url}"
        if [ $? -ne 0 ];then
	    echo_stderr "[ERROR] Failed to clone ${git_repo_url}"
	    exit ${EXIT_FATAL_MISSING_DEPENDENCY}
        fi
    fi
    popd >/dev/null
}

###
###     ensure_repo <module> [git_repo_url]
###         Ensure repo is at $WORK_ROOT/<module>
function ensure_repo(){
    ensure_repo_generic "$WORK_ROOT" "$1" "$2"
}

###
###     exit_if_failed <var> <exitStatus> <exitMsg>
function exit_if_failed(){
    if [ "$1" -ne 0 ];then
	failed $2 "$3"
    fi
}

###
###     exit_print_error <exitStatus>
###         Print error message just before exit. 
###         This function does not meant to call directly.
###         Environment:
###             EXIT_MSG: Error message to print.
EXIT_MSG=
QUIET_MODE=0
function exit_print_error(){
    local exitStatus=$?
    if [ $QUIET_MODE -eq 0 ];then
	case $exitStatus in
	    ${EXIT_OK} )
		echo_stderr "### Done ${EXIT_MSG}"
		;;
	    ${EXIT_FATAL_INVALID_OPTIONS} )
		zanata_script_help_short $0
		echo_stderr "### [FATAL] Invalid Options: ${EXIT_MSG}"
		;;
	    ${EXIT_FATAL_MISSING_DEPENDENCIES} )
		echo_stderr "### [FATAL] Missing dependencies: ${EXIT_MSG}"
		;;
	    ${EXIT_FATAL_UNKNOWN_MODULE} )
		zanata_script_help_short $0
		echo_stderr "### [FATAL] Unknown or Invalid module: ${EXIT_MSG}"
		;;
	    ${EXIT_FATAL_FAIL} )
		echo_stderr "### [FATAL] Fail: ${EXIT_MSG}"
		;;
	    ${EXIT_RETURN_FALSE} )
		echo_stderr "### [RETURN] FALSE: ${EXIT_MSG}"
		;;
	    * )
		echo_stderr "### Unexpected Exit: ${EXIT_MSG}"
		;;
	esac
    fi
    exit ${exitStatus}
}

###
###     failed <exitStatus> <exitMsg>
function failed(){
    local exitStatus=$1
    EXIT_MSG="$2"
    exit $exitStatus
}

###
###     get_releasing_branch <module>
###         Determine RELEASING_BRANCH, the branch that we recommend downstream to use, 
###         and release process should mainly happen here.
###         It is:
###             'release' if that branch exists; otherwise "master"
function get_releasing_branch(){
    local module=$1
    if does_branch_exist ${module} origin/release ;then
        echo "release"
        return 0
    fi
    echo "master"
    return 0
}

###
###     get_devel_branch <module>
###         Determine DEVEL_BRANCH, the branch for committing new features. 
###         It is 'master'.
function get_devel_branch(){
    echo "master"
}

###
###     get_module <argument>
###         Determine module.
###         Print: <module or - for unknown>
function get_module(){
    case $1 in
	*api)
	    echo "zanata-api"
	    ;;
	*assets)
	    echo "zanata-assets"
	    ;;
	*client)
	    echo "zanata-client"
	    ;;
	*common)
	    echo "zanata-common"
	    ;;
	*jgettext)
	    echo "jgettext"
	    ;;
	*parent)
	    echo "zanata-parent"
	    ;;
	*openprops)
	    echo "openprops"
	    ;;
	*server)
	    echo "zanata-server"
	    ;;
	*)
	    echo "-"
	    ;;
    esac
}

###
###     get_module_from_command <firstArg>
###         Determine module. or exit with EXIT_FATAL_UNKNOWN_MODULE
###         Print: <module> <isShift>
###             module: module name
###             isShift: 1 for need shift, 0 otherwise.
function get_module_from_command(){
    local firstArg=$1

    Module=$(get_module $0)
    if [ "x$Module" = "x-" ];then
	Module=$(get_module $firstArg)
	if [ "x$Module" = "x-" ];then
	    exit ${EXIT_FATAL_UNKNOWN_MODULE}
	else
	    echo "$Module 1"
	fi
    else
	echo "$Module 0"
    fi
}

###
###     get_artifact_id <argument>
###         Obtain SCM Tag like zanata-parent, api
###         Print: <SCM Tag>
function get_artifact_id(){
    case $1 in
	*api)
	    echo "api"
	    ;;
	*assets)
	    echo "zanata-assets"
	    ;;
	*client)
	    echo "client"
	    ;;
	*common)
	    echo "common"
	    ;;
	*jgettext)
	    echo "jgettext"
	    ;;
	*parent)
	    echo "zanata-parent"
	    ;;
	*openprops)
	    echo "openprops"
	    ;;
	*server)
	    echo "server"
	    ;;
	*)
	    failed ${EXIT_FATAL_UNKNOWN_MODULE} "get_artifact_id: module not recognized "
	    ;;
    esac
}

###
###     parse_gav <GAV>
###         Parse GAV
###         GAV can either in following formats
###             commons-cli:commons-cli:1.0 
###             commons-cli:commons-cli:jar:1.0 
###             commons-cli:commons-cli:jar:1.0:test
###             commons-cli:commons-cli:jar:source:1.0:test
function parse_gav(){
    local gav=$1
    GroupId=$(awk -F ':' '{print $1}'<<<$gav)
    ArtifactId=$(awk -F ':' '{print $2}'<<<$gav)
    local c3=$(awk -F ':' '{print $3}'<<<$gav)
    local c4=$(awk -F ':' '{print $4}'<<<$gav)
    local c5=$(awk -F ':' '{print $5}'<<<$gav)
    if [[ "$c3" != jar && "$c3" != pom && "$c3" != ejb ]];then
        Version=$c3
    elif [[ "$c4" != source* && "$c4" != compat && "$c4" != ejb ]];then
        Version=$c4
    else
        Version=$c5
    fi
    test -n "$GroupId" -a -n "$ArtifactId" -a -n "$Version"
    exit_if_failed $? ${EXIT_FATAL_INVALID_OPTIONS} "GAV $gav is invalid, should be in groupId:artifactId:version"
    Gav="$GroupId:$ArtifactId:$Version"
}

###
###     ga_to_rpm_name <GroupId> <artifactId>
###        GroupId-ArtifactId to RPM name
function ga_to_rpm_name(){
    echo "$1-$2"
}

###
###     gav_to_nv <GroupId> <artifactId> <Version>
###        GroupId-ArtifactId-Version to RPM name-version
function gav_to_nv(){
    local version=$(sed -e 's/-/_/g' <<<$3)
    echo "$(ga_to_rpm_name $1 $2)-$version"
}

###
###     gav_to_nvr <GroupId> <artifactId> <Version>
###        GroupId-ArtifactId-Version to RPM name-version-release
###        release is always 1
###        Note the release does not include dist tag (.el7)
###        
function gav_to_nvr(){
    local release=1
#    if [[ "$version" =~ _SNAPSHOT ]];then
#	version=$(sed -e 's/_SNAPSHOT//' <<<$version)
#		release="0.snapshot"
#    fi
    echo "$(gav_to_nv $1 $2 $3)-$release"
}

###
###     gav_to_path_prefix <GroupId> <artifactId> <version>
###        Return path prefix, when given GroupId, ArtifactId, and Version
function gav_to_path_prefix(){
    local groupId=$1
    local artifactId=$2
    local version=$3
    local retStr=$(sed -e 's|\.|/|' <<< ${groupId})
    retStr+="/${artifactId}/${version}/${artifactId}-${version}"
    echo "$retStr"
}

function gav_to_maven_artifact_dir(){
    local groupId=$1
    local artifactId=$2
    local version=$3
    local retStr=$(sed -e 's|\.|/|g' <<< ${groupId})
    retStr+="/${artifactId}/${version}"
    echo "$retStr"
}

###
###     print_status [-n] [-q] [-s] [-t <Stage>] [message]
###         Print the status message.
###         Options:
###             -n: Do not print end-of-line in the end.
###             -q: Quiet, do not output anything
###             -s: prepend separation line before message
###             -t <Stage>: Specify Stage
###         If -s is specified, it will pad separation line before message, like
###         "[Stage]============================== Start"
###         It will use following Environment variables
###             Stage: As stage inside []
ZnatNoEOL=0
function print_status(){
    local outputStr=
    local optionArray=()
    local optionN=0
    local optionS=0

    while [[ $1 == -* ]]; do
	case $1 in
	    -n )
		optionArray+=( -n )
		shift
		optionN=1
		;;
	    -q )
		return
		;;
	    -s )
		optionS=1
		shift
		;;
	    -t )
		shift
		Stage=$1
		shift
		;;
        esac
    done
    if [ $ZnatNoEOL -eq 0 ];then
	## Previous line already ended
	outputStr+="### [$Stage]"
    fi

    if [ $optionS -eq 1 ];then
	outputStr+="=============================="
    fi

    local message="$1"
    outputStr+="$message"
    echo_stderr ${optionArray[@]} "$outputStr"

    ZnatNoEOL=$optionN
}

###
###     time-stamp [DATE_FORMAT]
###         Use stamp like "2015-06-29-06:56:34-953717856", base on UTC
###         Default: '%F-%R-%N'
function time-stamp(){
    local DATE_FORMAT=$1
    if [ -z "$DATE_FORMAT" ];then
	DATE_FORMAT='%F-%R-%N'
    fi
    date -u +"$DATE_FORMAT"
}

###
### EXIT_STATUS
###     Success:
###         EXIT_OK
declare EXIT_OK=0

###
###     Fatal that should stop immediately:
###         EXIT_FATAL_UNSPECIFIED: Unspecified fatal error, 
###             usually indicate a bug in our scripts.
declare EXIT_FATAL_UNSPECIFIED=1

###         EXIT_FATAL_INVALID_OPTIONS: Wrong options were given
declare EXIT_FATAL_INVALID_OPTIONS=3

###         EXIT_FATAL_MISSING_DEPENDENCY: Cannot find dependency
declare EXIT_FATAL_MISSING_DEPENDENCY=4

###         EXIT_FATAL_UNKNOWN_MODULE: Invalid or unknown module name.
declare EXIT_FATAL_UNKNOWN_MODULE=5

###         EXIT_FATAL_FAIL: Script detected that a fatal error occurred.
declare EXIT_FATAL_FAIL=6

###
###     Error that need to stop before next stage:
###         EXIT_ERROR_FAIL: Script detected that an error occurred.
declare EXIT_ERROR_FAIL=20

###     Return value, should not print error messages:
###         EXIT_RETURN_FALSE: Script should return false
declare EXIT_RETURN_FALSE=40

case $1 in
    help )
        zanata_script_help $0
	exit ${EXIT_OK}
        ;;
    help-section )
	zanata_help_section $0 $2
	exit ${EXIT_OK}
	;;
    help-list-sections )
	zanata_help_list_sections $0
	exit ${EXIT_OK}
	;;
esac

###
### ENVIRONMENT
###     TMP_ROOT:
###         Root of temporary directories and files, and expected to be clean
###         Default: /tmp/zanata
: ${TMP_ROOT:=/tmp/zanata}
create_missing_dir "${TMP_ROOT}"

###
###     REPO_LOCAL_DIR:
###         Temporary maven repo
###         Default: /tmp/maven-central-release-repo
: ${REPO_LOCAL_DIR:=${TMP_ROOT}/maven-central-release-repo}
create_missing_dir "${REPO_LOCAL_DIR}"

###
###     DEVEL_ROOT:
###         Root of development project directories.
###	    For example,  Git Repo zanata-scripts is expected to be in 
###         ${DEVEL_ROOT}/zanata-scripts
###         Default: ${HOME}/devel
: ${DEVEL_ROOT:=$HOME/devel}
create_missing_dir "${DEVEL_ROOT}"

###
###     WORK_ROOT:
###         Root of working directories, whose content is expected to be changed by scripts.
###         So normally this should NOT be your development directory.
###         You can also clean it by removing it, it should rebuild when running any scripts use it.
###         Default: ${HOME}/zanata-work-root
: ${WORK_ROOT:=${HOME}/zanata-work-root}
create_missing_dir "${WORK_ROOT}"

###
###     ZANATA_GIT_URL_PREFIX:
###         Prefix of Zanata Git URL
###         Default: git@github.com:zanata
: ${ZANATA_GIT_URL_PREFIX:=git@github.com:zanata}

###
###     M2_REPOSITORY_DIR
###         Repository for maven
###         Default: ${HOME}/.m2/repository
: ${M2_REPOSITORY_DIR:=$HOME/.m2/repository}

