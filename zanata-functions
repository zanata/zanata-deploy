#!/bin/bash
### NAME
###     zanata-functions
###
### SYNOPSIS
###     zanata-functions [help|exit-status-help]
### 
### DESCRIPTION
###     This script is basically for source (include) from other script.
### 
: ${WORK_ROOT:=/tmp/zanata}
: ${REPO_LOCAL_DIR:=/tmp/maven-central-release-repo}
: ${ZANATA_GIT_URL_PREFIX:=git@github.com:zanata}

### FUNCTIONS
function zanata_script_help_header(){
    shopt -s extdebug
    local script=$1
    [ -z "$script" ] && script=$0
    sed -n -e '/^###/ {s|^###||p}' $script |  sed -e '/^\s*EXIT_STATUS/,$d'
}

function zanata_script_exit_status_help(){
    shopt -s extdebug
    local script=$(declare -F zanata_script_exit_status_help | sed -e 's|^[^/]*||')
    shopt -u extdebug
    sed -n -e '/^###/ {s|^###||p}' $script | sed -e '0,/^\s*EXIT_STATUS/d'
}

function zanata_script_help(){
    zanata_script_help_header $1
    echo -e " EXIT_STATUS"
    zanata_script_exit_status_help
}
    
function echo_stderr(){
    echo "$@" > /dev/stderr
}

function get_git_url(){
    echo "${ZANATA_GIT_URL_PREFIX}/$1.git"
}

###     checkout_releasing_branch <module> 
###         checkout RELEASING_BRANCH, the branch that we recommend downstream to use.
function checkout_releasing_branch(){
    local branchType=$1
    local module=$2
    local branch=$(get_releasing_branch $module)
    pushd ${WORK_ROOT}/${module} >/dev/null
    git fetch
    git checkout ${branch}
    popd >/dev/null
}

###     checkout_devel_branch <module> 
###         checkout DEVEL_BRANCH, the branch the branch for committing new features.
function checkout_devel_branch(){
    local branchType=$1
    local module=$2
    local branch=$(get_devel_branch $module)
    pushd ${WORK_ROOT}/${module} >/dev/null
    git fetch
    git checkout ${branch}
    popd >/dev/null
}

###     ensure_repo_generic <parentDir> <module> [git_repo_url]
###         Ensure repo is at <parentDir>/<module>
function ensure_repo_generic(){
    local parentDir=$1
    local module=$2
    local git_repo_url=$3
    echo_stderr "### Ensure the repo $module is at ${parentDir}/${module}"
    if [ -z "$git_repo_url" ];then
	git_repo_url=$(get_git_url ${module})
    fi
    if [ ! -d ${parentDir} ];then
	mkdir -p ${parentDir}
    fi
    pushd ${parentDir} >/dev/null
    if [ ! -d ${module} ];then
	git clone "${git_repo_url}"
        if [ $? -ne 0 ];then
	    echo_stderr "[ERROR] Failed to clone ${git_repo_url}"
	    exit ${EXIT_FATAL_MISSING_DEPENDENCY}
        fi
    fi
    popd >/dev/null
}

###     ensure_repo <module> [git_repo_url]
###         Ensure repo is at $WORK_ROOT/<module>
function ensure_repo(){
    ensure_repo_generic "$WORK_ROOT" "$1" "$2"
}

###     ensure_devel_repo <module> [git_repo_url]
###         Ensure repo is at $DEVEL_ROOT/<module>
function ensure_devel_repo(){
    ensure_repo_generic "$DEVEL_ROOT" "$1" "$2"
}

###     does_branch_exist <module> <branch>
function does_branch_exist(){
    local module=$1
    local branch=$2

    if [ ! -d "${WORK_ROOT}/${module}" ];then
	echo_stderr "[ERROR] ${WORK_ROOT}/${module} does not exist"
	exit ${EXIT_FATAL_MISSING_DEPENDENCY}
    fi

    pushd ${WORK_ROOT}/${module} >/dev/null
    echo_stderr -n "### Does ${module} has branch ${branch}?..."

    if git rev-parse --verify ${branch} &>/dev/null;then
        echo_stderr "yes" 
        return 0
    else
        echo_stderr "no"
        return ${EXIT_RETURN_FALSE}
    fi
    popd >/dev/null
}

###     get_releasing_branch <module>
###         Determine RELEASING_BRANCH, the branch that we recommend downstream to use, 
###         and release process should mainly happen here.
###         It is:
###             'release' if that branch exists; otherwise
###             'integration/master' if that branch exists; otherwise
###              'master'.
function get_releasing_branch(){
    local module=$1
    if does_branch_exist ${MODULE} origin/release ;then
        echo "release"
        return 0
    elif does_branch_exist ${MODULE} origin/integration/master ;then
        echo "integration/master"
        return 0
    fi
    echo "master"
    return 0
}

###     get_devel_branch <module>
###         Determine DEVEL_BRANCH, the branch for committing new features. 
###         It is:
###             'integration/master' if that branch exists; otherwise
###             'master'.
function get_devel_branch(){
    local module=$1
    if does_branch_exist ${MODULE} origin/integration/master ;then
        echo "integration/master"
        return 0
    fi
    echo "master"
    return 0
}

###
### EXIT_STATUS
###     Success
###         EXIT_OK
declare EXIT_OK=0

###     Fatal should stop immediately.
###         EXIT_FATAL_UNSPECIFIED: Unspecified fatal error, 
###             usually indicate a bug in our scripts.
declare EXIT_FATAL_UNSPECIFIED=1

###         EXIT_FATAL_INVALID_OPTIONS: Wrong options were given
declare EXIT_FATAL_INVALID_OPTIONS=3

###         EXIT_FATAL_MISSING_DEPENDENCY: Cannot find dependency
declare EXIT_FATAL_MISSING_DEPENDENCY=4

###         EXIT_FATAL_FAIL: Script detected that a fatal error occurred.
declare EXIT_FATAL_FAIL=5

###     Error that need to stop before next step.
###         EXIT_ERROT_FAIL: Script detected that an error occurred.
declare EXIT_ERROR_FAIL=20

###     Return value, should not print error messages.
###         EXIT_RETURN_FALSE: Script should return false
declare EXIT_RETURN_FALSE=40

case $1 in
    help )
        zanata_script_help $0
        ;;
    exit-status-help )
        zanata_script_exit_status_help
        ;;
esac
