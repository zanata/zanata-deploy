#!/bin/bash -e
### NAME
###     zanata-release-notes-prepend - Update the Zanata dependencies
###
### SYNOPSIS
###     zanata-release-notes-prepend [Options] <module>|<artifact> <version>
###
### DESCRIPTION
###     This program prepends release notes of specified version to release-notes.md
###     and create new git commit of it.
###
###     If the version is already in release-notes. It will do nothing but returns
###     EXIT_RETURN_FAIL (40) and quit.
###
###     It works on releasing branch.
###
### ARGUMENTS
###     <module>: module name like zanata-api
###
###     <version>: Version to be prepended
###
### OPTIONS
###     -h: Show this help.
###
###     -j: Jenkins mode.
###         This assumes that current directory is <module> work directory.
###         and correct branch is checked out.
###
### EXIT STATUS
###    Returns EXIT_OK (0) when successfully.
###
###    Returns EXIT_FATAL_INVALID_OPTIONS (3) when invalid
###        options or arguments are given
###
###    Returns EXIT_FATAL_MISSING_DEPENDENCY (4)
###        when the docs/release-notes.md is missing
###
###    Returns EXIT_FATAL_UNKNOWN_MODULE (5) when module does not exists
###
###    Returns EXIT_FATAL_FAIL (6) generic failure,
###        usually failed to get the resources at the net
###
###    Return EXIT_RETURN_FALSE (40) when Version-name exists, but no issues.
###

shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "${FunctionScriptFile}"
trap exit_print_error EXIT
ProgramName=$(basename $0)

##=== parsing Start ===
print_status -t "parse" -s "Start"
JenkinsMode=0

while getopts "hj" opt;do
    case $opt in
         h )
	     zanata_script_help $0
	     exit ${EXIT_OK}
	     ;;
	 j )
	     JenkinsMode=1
	     ;;
	 * )
	     failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	     ;;
    esac
done
shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command $1)
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"
ArtifactId=`get_artifact_id $Module`
Version=$1

##=== prepare  Start ===
print_status -t prepare -s "Start"
## If not JenkinsMode, then checkout should be done here
if [ $JenkinsMode -eq 0 ];then
    ensure_repo ${Module}
    checkout_releasing_branch $Module $WORK_ROOT
    cd "$WORK_ROOT/$Module"
fi

RELEASE_NOTES_FILE=docs/release-notes.md
if [ ! -r $RELEASE_NOTES_FILE ];then
    failed $EXIT_FATAL_MISSING_DEPENDENCY "docs/release-notes.md does not exist"
fi

##== Execute Start ==
print_status -t "execute" -s "Start"

##=== prepend jira  Start ===
print_status " prepend Jira"
TmpFileJira=`mktemp ${TMP_ROOT}/zanata-release-notes.jira.XXXXXXXX`

set +e
zanata-jira-get-release-notes "$ArtifactId-$Version" > $TmpFileJira
ExitCode=$?
set -e
case $ExitCode in
    $EXIT_OK )
	;;
    $EXIT_RETURN_FALSE )
	;;
    * )
	rm -f $TmpFileJira
	failed $ExitCode " Failed to get related jira issues"
	;;
esac

##=== Split  Start ===
print_status " split previous release-notes"
## greater: greater version
TmpFileGreater=`mktemp ${TMP_ROOT}/zanata-release-notes.greater.XXXXXXXX`
TmpFileThis=`mktemp ${TMP_ROOT}/zanata-release-notes.this.XXXXXXXX`
TmpFileLesser=`mktemp ${TMP_ROOT}/zanata-release-notes.lesser.XXXXXXXX`

Mode=g
Keep=0
while IFS= read -r l ;do
    line=$(sed -e 's/\s*$//' <<<"$l")
    if [ "$line" = "## $Version" ];then
	Mode=t
    elif [[ $Mode = "t" && "$line" =~ ^##\ [0-9] ]];then
	Mode=l
    fi
    case $Mode in
	g )
	    echo "$line" >> $TmpFileGreater
	    ;;
	t )
	    if [[ $Mode = "t" && "$line" =~ ^##\ [0-9] ]];then
		Keep=0
	    elif [[ "$line" =~ ^###*\ [Bb]ug\ [Ff]ix ]];then
		## Do not keep "Bug fixes" and "Changes"
		Keep=0
	    elif [[ "$line" =~ ^###*\ [Cc]hanges? ]];then
		Keep=0
	    elif [[ "$line" =~ ^###*\  ]];then
		Keep=1
	    elif [[ "$line" =~ ^----* ]];then
		## Remove split line
		Keep=0
	    fi
	    if [ $Keep -eq 1 ];then
		echo "$line" >> $TmpFileThis
	    fi
	    ;;
	l )
	    echo "$line" >> $TmpFileLesser
	    ;;
    esac
done < <(cat $RELEASE_NOTES_FILE)

##=== Combine Start ===
print_status " combine release-notes"
TmpFile=`mktemp ${TMP_ROOT}/zanata-release-notes.XXXXXXXX`
if [ -s $TmpFileGreater ];then
    cat $TmpFileGreater > $TmpFile
fi

echo "## $Version">> $TmpFile
if [ -s $TmpFileThis ];then
    cat $TmpFileThis >> $TmpFile
fi

if [ -s $TmpFileJira ];then
    cat $TmpFileJira >> $TmpFile
fi
echo -e "\n-----------------------\n" >> $TmpFile

cat $TmpFileLesser >> $TmpFile
mv $TmpFile $RELEASE_NOTES_FILE
rm -f $TmpFileJira $TmpFileGreater $TmpFileThis $TmpFileLesser

if git diff --exit-code ;then
    failed ${EXIT_RETURN_FALSE} " $RELEASE_NOTES_FILE does not need to change."
fi
git commit -m "doc(release): Prepend $RELEASE_NOTES_FILE for version $Version" -- $RELEASE_NOTES_FILE
exit ${EXIT_OK}

