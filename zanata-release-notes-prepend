#!/bin/bash -e
### NAME
###     zanata-release-notes-prepend - Update the Zanata dependencies
###
### SYNOPSIS
###     zanata-release-notes-prepend [Options] <module>|<artifact> <version>
### 
### DESCRIPTION
###     This program prepends release notes of specified version to release-notes.md
###     and create new git commit of it.
###
###     If the version is already in release-notes. It will do nothing but returns
###     EXIT_RETURN_FAIL (40) and quit.
###
###     It works on releasing branch.
###
### ARGUMENTS
###     <module>: module name like zanata-api
###
###     <version>: Version to be prepended
###
### OPTIONS
###     -h: Show this help.
###
###     -j: Jenkins mode.
###         This assumes that current directory is <module> work directory.
###         and correct branch is checked out.
###     
### EXIT STATUS
###    Returns EXIT_OK (0) when successfully.
###
###    Returns EXIT_FATAL_INVALID_OPTIONS (3) when invalid 
###        options or arguments are given
###
###    Returns EXIT_FATAL_MISSING_DEPENDENCY (4) 
###        when the docs/release-notes.md is missing
###
###    Returns EXIT_FATAL_UNKNOWN_MODULE (5) when module does not exists
###
###    Returns EXIT_FATAL_FAIL (6) generic failure, 
###        usually failed to get the resources at the net
###
###    Return EXIT_RETURN_FALSE (40) when Version-name exists, but no issues.
###

shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "${FunctionScriptFile}"
trap exit_print_error EXIT
ProgramName=$(basename $0)

##=== parsing Start ===
print_status -t "parse" -s "Start"
JenkinsMode=0

while getopts "hj" opt;do
    case $opt in
         h )
	     zanata_script_help $0
	     exit ${EXIT_OK}
	     ;;
	 j )
	     JenkinsMode=1
	     ;;
	 * )
	     failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	     ;;
    esac
done
shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command $1)
echo "moduleResult=$moduleResult"
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"
ArtifactId=`get_artifact_id $Module`
Version=$1

##=== prepare  Start ===
print_status -t prepare -s "Start"
## If not JenkinsMode, then checkout should be done here
if [ $JenkinsMode -eq 0 ];then
    ensure_repo ${Module}
    checkout_releasing_branch $Module $WORK_ROOT
    cd "$WORK_ROOT/$Module"
fi

RELEASE_NOTES_FILE=docs/release-notes.md
if [ ! -r $RELEASE_NOTES_FILE ];then
    failed $EXIT_FATAL_MISSING_DEPENDENCY "docs/release-notes.md does not exist"
fi

if grep -f "## $Version" $RELEASE_NOTES_FILE >& /dev/null;then
    failed $EXIT_RETURN_FALSE "Version $Version is already in $RELEASE_NOTE_FILE"
fi

##=== Execute  Start ===
print_status -t Execute -s "Start"

TmpFile=`mktemp zanata-release-notes.XXXXXXXX`
echo -e "## $Version\n"> $TmpFile

print_status
##==== Prepend jira issues ====
print_status " getting jira issues"
set +e
zanata-jira-get-release-notes "$ArtifactId-$Version" >> $TmpFile
ExitCode=$?
set -e
case $ExitCode in
    $EXIT_OK )
	;;
    $EXIT_RETURN_FALSE )
	;;
    * )
	failed $ExitCode " Failed to get related jira issues"
	;;
esac

echo -e "\n-----------------------\n" >> $TmpFile
cat $RELEASE_NOTES_FILE >> $TmpFile
mv $TmpFile $RELEASE_NOTES_FILE
git commit -m "doc(release): Prepend release notes for version $Version" -- $RELEASE_NOTES_FILE
