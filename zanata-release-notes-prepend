#!/bin/bash -eu
### NAME
###     zanata-release-notes-prepend - Update the Zanata dependencies
###
### SYNOPSIS
###     zanata-release-notes-prepend [Options] <module>|<artifact> <version>
###
### DESCRIPTION
###     This program prepends release notes of specified version to release-notes.md
###     and create new git commit of it.
###
###     If the version is already in release-notes. It will do nothing but returns
###     EXIT_RETURN_FAIL (40) and quit.
###
###     It works on releasing branch.
###
### ARGUMENTS
###     <module>: module name like zanata-api
###
###     <version>: Version to be prepended
###
### OPTIONS
###     -h: Show this help.
###
###     -j: Just use current directory.
###         This assumes that current directory is <module> work directory.
###         and correct branch is checked out.
###
###     -v: Verbose mode.
###         Show verbose message.
###
### EXIT STATUS
###    Returns EXIT_OK (0) when successfully.
###
###    Returns EXIT_FATAL_INVALID_OPTIONS (3) when invalid
###        options or arguments are given
###
###    Returns EXIT_FATAL_MISSING_DEPENDENCY (4)
###        when the docs/release-notes.md is missing
###
###    Returns EXIT_FATAL_UNKNOWN_MODULE (5) when module does not exists
###
###    Returns EXIT_FATAL_FAIL (6) generic failure,
###        usually failed to get the resources at the net
###
###    Return EXIT_RETURN_FALSE (40) when Version-name exists, but no issues.
###

shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "${FunctionScriptFile}"
trap exit_print_error EXIT
ProgramName=$(basename $0)
##== function start ==
## version_greater ver1 ver2
##     return 0 when ver1 > ver2
function version_greater(){
    local IFS=.
    local ver1=($1)
    local ver2=($2)
    local i=0
    for ((i=0; i<${#ver1[@]} ; i++));do
        if [ $i -ge ${#ver2[@]} ];then
            return 0
        elif [ ${ver1[$i]} -gt ${ver2[$i]} ];then
            return 0
        elif  [ ${ver1[$i]} -lt ${ver2[$i]} ];then
            return 1
        fi
    done
    return 1
}

##== parsing Start ==
print_status -t "parse" -s "Start"
JustUseCurrentDirectoryMode=0
VerboseMode=0
JiraGetReleaseNoteOptArray=()

while getopts "hjv" opt;do
    case $opt in
         h )
             zanata_script_help $0
             exit ${EXIT_OK}
             ;;
         j )
             JustUseCurrentDirectoryMode=1
             ;;
         v )
             VerboseMode=1
             JiraGetReleaseNoteOptArray+=(-v)
             ;;
         * )
             failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
             ;;
    esac
done
shift $((OPTIND-1))
export JustUseCurrentDirectoryMode

## Get Module
branch_prepare RELEASING "$@"
shift $ShiftOffset
print_status " Module=$Module"

ArtifactId=$(get_artifact_id $Module)
Version=$1

if [ $JustUseCurrentDirectoryMode -eq 0 ];then
    cd "$WORK_ROOT/$Module"
fi

##== prepare  Start ==
print_status -t prepare -s "Start"
ReleaseNotesFile=docs/release-notes.md
if [[ ! -r $ReleaseNotesFile ]];then
    failed $EXIT_FATAL_MISSING_DEPENDENCY "docs/release-notes.md does not exist"
fi

##== retrieve Jira  Start ==
print_status -t "jira" -s "Start"
TmpFileJira=`mktemp ${TMP_ROOT}/zanata-release-notes.jira.XXXXXXXX`

set +e
zanata-jira-get-release-notes ${JiraGetReleaseNoteOptArray[@]-} "$ArtifactId-$Version" > $TmpFileJira
ExitCode=$?
set -e
case $ExitCode in
    $EXIT_OK )
        ;;
    $EXIT_RETURN_FALSE )
        ;;
    * )
        rm -f $TmpFileJira
        failed $ExitCode " Failed to get related jira issues"
        ;;
esac

##== Split  Start ==
print_status -t "release-notes parse"  -s "Start"
## greater: greater version
TmpFileGreater=`mktemp ${TMP_ROOT}/zanata-release-notes.greater.XXXXXXXX`
TmpFileThis=`mktemp ${TMP_ROOT}/zanata-release-notes.this.XXXXXXXX`
TmpFileLesser=`mktemp ${TMP_ROOT}/zanata-release-notes.lesser.XXXXXXXX`

Mode=g
Keep=0
while IFS= read -r l ;do
    line=$(sed -e 's/\s*$//' <<<"$l")
    if [ "$line" = "## $Version" ];then
        Mode=t
    elif [[ "$line" =~ ^##\ [0-9] ]];then
        v=$(sed -e 's/^## \(.*\)\s*$/\1/'<<<"$line")
        if version_greater $v $Version;then
            Mode=g
        else
            Mode=l
        fi
    fi
    case $Mode in
        g )
            echo "$line" >> $TmpFileGreater
            ;;
        t )
            if [[ $Mode = "t" && "$line" =~ ^##\ [0-9] ]];then
                Keep=0
            elif [[ "$line" =~ ^###*\ [Bb]ug\ [Ff]ix ]];then
                ## Do not keep "Bug fixes" and "Changes"
                Keep=0
            elif [[ "$line" =~ ^###*\ [Cc]hanges? ]];then
                Keep=0
            elif [[ "$line" =~ ^###*\  ]];then
                Keep=1
            elif [[ "$line" =~ ^----* ]];then
                ## Remove split line
                Keep=0
            fi
            if [ $Keep -eq 1 ];then
                echo "$line" >> $TmpFileThis
            fi
            ;;
        l )
            echo "$line" >> $TmpFileLesser
            ;;
    esac
    if [ $VerboseMode -eq 1 ];then
        echo "$Mode$Keep=$line"
    fi
done < <(cat $ReleaseNotesFile)

##== Combine Start ==
print_status -t "release-notes combine"  -s "Start"

TmpFile=`mktemp ${TMP_ROOT}/zanata-release-notes.XXXXXXXX`
if [ -s $TmpFileGreater ];then
    cat $TmpFileGreater > $TmpFile
fi

echo "## $Version">> $TmpFile
if [ -s $TmpFileThis ];then
    cat $TmpFileThis >> $TmpFile
fi

if [ -s $TmpFileJira ];then
    cat $TmpFileJira >> $TmpFile
fi
echo -e "\n-----------------------\n" >> $TmpFile

cat $TmpFileLesser >> $TmpFile
mv $TmpFile $ReleaseNotesFile
rm -f $TmpFileJira $TmpFileGreater $TmpFileThis $TmpFileLesser

if git diff --exit-code ;then
    failed ${EXIT_RETURN_FALSE} " $ReleaseNotesFile does not need to change."
fi
git commit -m "doc(release): Update $ReleaseNotesFile for version $Version" -- $ReleaseNotesFile
exit ${EXIT_OK}

