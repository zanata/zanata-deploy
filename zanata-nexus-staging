#!/bin/bash

function print_usage(){
    cat <<-END
SYNOPSIS
    zanata-nexus-staging [options] <PROJECT>
    zanata-nexus-staging-tennera   [options]
    zanata-nexus-staging-openprops [options]
    zanata-nexus-staging-parent    [options]
    zanata-nexus-staging-api       [options]
    zanata-nexus-staging-common    [options]
    zanata-nexus-staging-client    [options]

OPTIONS
    -h: Show this help
    -b: Bump the version in integration/master as well
        (e.g. when releasing from 3.7.X -> 3.8.0).
        If not specified, only the default branch will be touch
        (e.g. when releasing from 3.7.0 -> 3.7.1 ).
	Default branch is:
	  release if it has release; otherwise
	  integration/master if it has release; otherwise
	  master.

    -r: Skip release plugin

DESCRIPTION
    This program perform the release and push the relese with nexus.
It can do following tasks:

 * For making a X release (e.g. 3.Y.Z -> 4.0.0) or 
   Y release: (e.g. 3.7.Z -> 3.8.0 ), run:

   zanata-nexus-staging-<module> -b

 * For making a Z release (e.g. 3.7.0 -> 3.7.1 ), run 

   zanata-nexus-staging-<module>

 * If tag is made but release failed, and you fixed it without changing 
   the source, You can resume the release process with 
  
   zanata-nexus-staging-<module> -r


ENVIRONMENT
    DEFAULT_BRANCH
      Branch is automatically determined by PROJECT.
      Specify Environment DEFAULT_BRANCH to override.
	
    WORK_ROOT
      The base directory for repository checkout
      As maven release plugin generally require a clean git working tree
      This script will clean it for you.
      Thus it is better not use normal working directory.
	
    REPO_LOCAL_DIR (Optional)
      The directory for maven repo
      This should NOT be your normal work maven repo
	
EXIT_STATUS
    EXIT_INVALID_OPTIONS=3
    EXIT_FAIL_TO_CLONE=4
    EXIT_RELEASE_GOAL_FAIL=5
END
}

function echo_stderr(){
    echo "$1" > /dev/stderr
}

: ${WORK_ROOT:=/tmp/zanata}
: ${REPO_LOCAL_DIR:=/tmp/maven-central-release-repo}

EXIT_INVALID_OPTIONS=3
EXIT_FAIL_TO_CLONE=4
EXIT_RELEASE_GOAL_FAIL=5

BUMP_INTEGRATION_MASTER=
SKIP_RELEASE_PLUGIN=

while getopts "brh" opt;do
    case $opt in
	h )
	    pring_usage
	    exit 0
	    ;;
        b )
	    BUMP_INTEGRATION_MASTER=1
	    ;;
	r )
	    SKIP_RELEASE_PLUGIN=1
	    ;;
	* )
	    echo "Invalid option $opt" > /dev/stderr
	    exit ${EXIT_INVALID_OPTIONS}
	    ;;
    esac
done

shift $((OPTIND-1))
if [ -n "$1" ];then
    PROJECT="$1"
fi

case $0 in
    *-tennera)
	PROJECT=tennera
        ;;
    *-openprops)
	PROJECT=openprops
	;;
    *-parent)
	PROJECT=zanata-parent
	;;
    *-api)
	PROJECT=zanata-api
	;;
    *-common)
	PROJECT=zanata-common
	;;
    *-client)
	PROJECT=zanata-client
	;;
    *)
	if [ -z "$PROJECT" ]; then
	    print_usage
	    exit ${EXIT_INVALID_OPTIONS}
	fi
	;;
esac

### Set default branches
if [ -z "${DEFAULT_BRANCH}" ];then
    case ${PROJECT} in
        tennera | openprops )
	    DEFAULT_BRANCH=master
            ;;
        zanata-parent )
	    DEFAULT_BRANCH=integration/master
            ;;
        zanata-api | zanata-common | zanata-client)
	    DEFAULT_BRANCH=release
            ;;
    esac
fi

GIT_REPO_URL=git@github.com:zanata/${PROJECT}.git

if [ ! -d ${WORK_ROOT} ];then
    mkdir -p ${WORK_ROOT}
fi

cd ${WORK_ROOT}
if [ ! -d ${PROJECT} ];then
    git clone ${GIT_REPO_URL}
    if [ $? -ne 0 ];then
	echo "[ERROR] Failed to clone ${GIT_REPO_URL}" >/dev/stderr
	exit ${EXIT_FAIL_TO_CLONE}
    fi
fi

cd ${PROJECT}
git fetch

### Does it has release branch?
if git rev-parse --verify origin/release ;then
    HAS_RELEASE_BRANCH=1
else
    HAS_RELEASE_BRANCH=
fi

### Does it has integration/master branch?
if git rev-parse --verify origin/integration/master ;then
    HAS_INTEGRATION_MASTER_BRANCH=1
else
    HAS_INTEGRATION_MASTER_BRANCH=
fi

### Update release branch if it it exists
if [ -n "$HAS_RELEASE_BRANCH" ];then
    echo_stderr "[pre-release] Updating release branch"
    git checkout release
    git merge origin/release --ff-only --quiet
    git merge origin/master --ff-only --quiet
    echo_stderr "[pre-release] release branch updated"
fi

### Update integration/master branch if it exists
if [ -n "${BUMP_INTEGRATION_MASTER}" -a -n "$HAS_INTEGRATION_MASTER_BRANCH" ];then
    echo_stderr "[pre-release] Updating integration/master branch"
    git checkout integration/master
    git merge origin/integration/master --ff-only --quiet
    mvn -e release:update-versions -DautoVersionSubmodules=true
    git commit pom.xml */pom.xml -m "prepare for next development iteration"
    git push origin integration/master
    echo_stderr "[pre-release] integration/master branch updated"
fi

### Release process
function release_perform(){
    if [ -z "${SKIP_RELEASE_PLUGIN}" ];then
        git clean -f -d
        mvn -e -Dmaven.repo.local=$REPO_LOCAL_DIR -Dgpg.useagent release:clean release:prepare release:perform
        if [ $? -ne 0 ];then
	    echo_stderr "[ERROR]: release goals failed"
	    exit ${EXIT_RELEASE_GOAL_FAIL}
        fi
    fi
    return 0
}

echo_stderr "### Start release process"
git checkout ${DEFAULT_BRANCH}
git fetch --tags
git pull

case $PROJECT in
    zanata-parent | zanata-api | zanata-common )
	### zanata-parent has only master
	release_perform
	mvn -e nexus-staging:release -Psonatype-oss-release \
	    -DstagingRepositoryId=$(grep -oP '^stagingRepository\.id=\K.*' target/checkout/target/nexus-staging/staging/*.properties)
	;;
    zanata-client )
	### auto nexus-staging does not seem to work with zanata-client
	### Need to use manual bundle jars
	release_perform

        ### Create and sign the artifacts
	mvn -e clean deploy source:jar javadoc:jar jar:jar gpg:sign -Dgpg.useagent -DskipTests=true -DskipArqTests=true -Dfindbugs.skip=true 

	### make bundles for each submodules:
	SUBMODULES=(. zanata-cli zanata-client-commands zanata-maven-plugin zanata-rest-client)
	BUNDLE_JARS=()
	for sm in "${SUBMODULES[@]}"; do
	    pushd ${sm}/target
	    jar cvf bundle.jar $(for i in `LANG=C find . -name  "*.asc" | sed -e 's/.asc$//' | xargs`;do echo -n $i $i.asc " ";done)
	    BUNDLE_JARS+="${sm}/target/bundle.jar"
	    popd
	done

	### Notify user to upload bundles
	cat <<-END
	Please:
	1. Login to oss.sonatype.org
	2. On Left panel, under Build Promotion section, click Staging Upload
	3. Upload following files:
	END

	for bj in "${BUNDLE_JARS[@]}"; do
	    echo "$bj"
	done
	;;

    * )
	### Project like tennera or openprops
	### These have only master
	release_perform
	mvn -e nexus-staging:close nexus-staging:release
	;;
esac

