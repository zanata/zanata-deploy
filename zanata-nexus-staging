#!/bin/bash
set -e
### NAME
###     zanata-nexus-staging - Staging and Release to Sonatype nexus
###
### SYNOPSIS
###     zanata-nexus-staging [options] <MODULE>
###     zanata-nexus-staging-openprops [options]
###     zanata-nexus-staging-jgettext  [options]
###     zanata-nexus-staging-parent    [options]
###     zanata-nexus-staging-api       [options]
###     zanata-nexus-staging-common    [options]
###     zanata-nexus-staging-client    [options]
###     zanata-nexus-staging-assets    [options]
### 
### OPTIONS
###     -h: Show this help
###
###     -d <developmentVersion>:
###         Development Vesion like: 3.10.0-SNAPSHOT
###
###     -s: Skip release plugin
###
###     -r <releaseVersion>
###         Release Vesion like: 3.9.0
### 
### DESCRIPTION
###     This program releases version in maven and submit to sonatype.
### It operates upon releasing branch by default.
### To change that, use environment RELEASING_BRANCH.
###
### USE CASES
###  * Normally following is sufficient:
###    zanata-nexus-staging-<module>
### 
###  * If tag is made but release failed, and you fixed it without changing 
###    the source, You can resume the release process with 
###   
###    zanata-nexus-staging-<module> -r
### 
### ENVIRONMENT
###     RELEASING_BRANCH
###       The branch that we recommend downstream to use, and 
###       release process should mainly happen here.
###       It is:
###          'release' if that branch exists; otherwise
###          'integration/master' if that branch exists; otherwise
###          'master'.
###  
###     DEVEL_BRANCH 
###       The branch for committing new features. It is:
###          'integration/master' if that branch exists; otherwise
###          'master'.
### 
###     REPO_LOCAL_DIR (Optional)
###       The directory for maven repo
###       This should NOT be your normal work maven repo
### 
###     WORK_ROOT
###       The base directory for repository checkout
###       As maven release plugin generally require a clean git working tree
###       This script will clean it for you.
###       Thus it is better not use normal development directory.
### 	

ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "$FunctionScriptFile"
trap exit_print_error EXIT

### 
###     MAVEN_RELEASE_OPTIONS
###       The maven options to be use in this scripts
###       Default: -e -Dmaven.repo.local=$REPO_LOCAL_DIR -Dgpg.useagent -Prelease -DupdateReleaseInfo=true
: ${MAVEN_RELEASE_OPTIONS:="-e -Dmaven.repo.local=$REPO_LOCAL_DIR -Dgpg.useagent -Prelease -DupdateReleaseInfo=true"}
: ${NEXUS_STAGING_PLUGIN:=org.sonatype.plugins:nexus-staging-maven-plugin}
: ${NEXUS_STAGING_OPTIONS:="-e -DnexusUrl=https://oss.sonatype.org/ -DserverId=sonatype-nexus-staging -Prelease"}

##=== function definitions Start ===
function release_perform(){
    if [ $SkipReleasePlugin -eq 0 ];then
	print_status -t release-tagging -s "Start"
	if [ -n "$DevelopmentVersion" ];then
	    MAVEN_RELEASE_OPTIONS+=" -DdevelopmentVersion=$DevelopmentVersion"
	fi

	if [ -n "$ReleaseVersion" ];then
	    MAVEN_RELEASE_OPTIONS+=" -DreleaseVersion=$ReleaseVersion"
	fi

	git clean -f -d

	case $Module in
	    zanata-assets)
		;;
	    *)
		print_status " Update Zanata dependencies"
		set +e
		$ScriptDir/zanata-version-update -j
		VersionUpdateResult=$?
		if [ "$VersionUpdateResult" = "$EXIT_RETURN_FALSE" ];then
		    read -p "### Are the change looks alright? Press [Ctrl-C] to break, [Enter] to continue"
		    git commit -a -m "chore(dependency): [zanata-nexus-staging] Update Zanata dependencies"
		elif [ "$VersionUpdateResult" != "$EXIT_OK" ];then
		    ## Error, pass the error code as-is
		    exit $VersionUpdateResult
		fi
		set -e
		;;
	esac

	print_status " Dry-run: release:prepare release:perform"
        mvn ${MAVEN_RELEASE_OPTIONS} release:clean release:prepare -DdryRun=true 

        print_status " Real-run: it should sign artifacts, push $Module to nexus, then close it"
        mvn ${MAVEN_RELEASE_OPTIONS} release:clean release:prepare release:perform

	if [ $? -ne 0 ];then
	    EXIT_MSG="release goals failed"
	    exit ${EXIT_FATAL_FAIL}
	fi
	print_status " Done"
    fi
    return 0
}

function nexus_release(){
    print_status -t nexus-release -s "Start"

    StagingRepositoryBuffer=$(mvn $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:rc-list | sed -n  -e '/orgzanata-.* / p' )
    StagingRepositoryId=$( awk '{print $2}' <<<"$StagingRepositoryBuffer" | tail -n 1)
    StagingRepositoryState=$( awk '{print $3}' <<<"$StagingRepositoryBuffer" | tail -n 1)
    StagingPropertiesGlob="target/checkout/target/nexus-staging/staging/*.properties"

    if [ -z "$StagingRepositoryId" ];then
	if [ ! -e $StagingPropertiesGlob ];then
	    failed $EXIT_FATAL_FAIL " Failed to find $StagingPropertiesGlob"
	fi
	StagingRepositoryId=$(grep -oP '^stagingRepository\.id=\K.*' $StagingPropertiesGlob )
	test -n "$StagingRepositoryId"
	exit_if_failed $? $EXIT_FATAL_FAIL " Cannot obtain staging repository id from both nexus-staging plugin and local target files"
    fi

    print_status " StagingRepositoryId=${StagingRepositoryId}"

    # read -p "### Please login sonatype and check maven-metadata.xml. Press [Ctrl-C] to break, [Enter] to continue"

    if [ "$StagingRepositoryState" = "OPEN" ];then
	print_status " nexus-staging:close"
	mvn $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:close \
	    -DstagingRepositoryId=${StagingRepositoryId}

    fi

    print_status " nexus-staging:release"
    mvn $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:release \
	-DstagingRepositoryId=${StagingRepositoryId}

}
##=== function definitions End   ===

##=== parsing Start ===
print_status -t parsing -s "Start"

SkipReleasePlugin=0
MavenReleaseBranch=
DevelopmentVersion=
ReleaseVersion=

while getopts "d:r:sh" opt;do
    case $opt in
	h )
	    zanata_script_help $0
	    exit ${EXIT_OK}
	    ;;
	d )
	    DevelopmentVersion=$OPTARG
	    ;;
	r )
	    ReleaseVersion=$OPTARG
	    ;;
	s )
	    SkipReleasePlugin=1
	    ;;
	* )
            failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	    ;;
    esac
done

shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command $1)
echo "moduleResult=$moduleResult"
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

## Final parsing check
if [ "$Module" = "zanata-assets" ];then
    if [ -z "$ReleaseVersion" ];then
	failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -r <releaseVersion>"
    fi	
    if [ -z "$DevelopmentVersion" ];then
	failed $EXIT_FATAL_INVALID_OPTIONS "assets requires -d <developmentVersion>"
    fi	
fi


##=== parpare  Start ===
print_status -t prepare -s "Start"

##  Ensure repo
if [ ! -d ${WORK_ROOT} ];then
    mkdir -p ${WORK_ROOT}
fi

ensure_repo ${Module}
## Determine RELEASING_BRANCH
: ${RELEASING_BRANCH:=$(get_releasing_branch $Module)}
print_status " RELEASING_BRANCH for $Module is ${RELEASING_BRANCH}"  

MavenReleaseBranch=$RELEASING_BRANCH
print_status " Maven release for $Module will be operated on $MavenReleaseBranch"  

cd ${WORK_ROOT}/${Module}
git fetch
git fetch --tags

##=== pre-release  Start ===
print_status -t pre-release -s "Start"

print_status " updating existing maven release branch ($MavenReleaseBranch)"
git reset --hard HEAD
git checkout "$MavenReleaseBranch"
git pull

print_status " Branch ${MavenReleaseBranch}: merge origin/$MavenReleaseBranch"
git merge origin/$MavenReleaseBranch --ff-only --quiet


##=== release  Start ===
print_status -t release -s "Start"

case $Module in
    zanata-assets )
	print_status -t release-tagging -s "Start"

	## Release plugin does not work with assets
	sed -i -e 's|<tag>HEAD</tag>|<tag>zanata-assets-'$ReleaseVersion'</tag>|' pom.xml
	mvn ${MAVEN_RELEASE_OPTIONS} versions:set -DnewVersion=$ReleaseVersion
        mvn scm:checkin -Dmessage="chore(version): set version ${ReleaseVersion}" -DpushChanges=false
	mvn scm:tag -Dtag=$Module-$ReleaseVersion -DpushChanges=false

	## Deploy
	mvn -Prelease clean deploy

	nexus_release

	## Post tag action
	sed -i -e 's|<tag>.*</tag>|<tag>HEAD</tag>|' pom.xml
	mvn ${MAVEN_RELEASE_OPTIONS} versions:set -DnewVersion=$DevelopmentVersion
	mvn scm:checkin -Dmessage="chore(version): new snapshot version ${DevelopmentVersion}"
	;;

    zanata-parent | zanata-api | zanata-common | zanata-client)
        release_perform

	nexus_release
	;;
    * )
	## Module not in sonatype
	release_perform
	;;
esac

