#!/bin/bash

set -e

function print_usage(){
    cat <<-END
SYNOPSIS
    zanata-nexus-staging [options] <MODULE>
    zanata-nexus-staging-tennera   [options]
    zanata-nexus-staging-openprops [options]
    zanata-nexus-staging-parent    [options]
    zanata-nexus-staging-api       [options]
    zanata-nexus-staging-common    [options]
    zanata-nexus-staging-client    [options]
    zanata-nexus-staging-assets    [options]

OPTIONS
    -h: Show this help
    -b: Big release.
        Integration/master need to be updated.
        (e.g. when releasing from 3.7.X -> 3.8.0).
        If not specified, only the default branch will be touch
        (e.g. when releasing from 3.7.0 -> 3.7.1 ).
	Default branch is:
	  release if it has release; otherwise
	  integration/master if it has release; otherwise
	  master.

    -r: Skip release plugin

DESCRIPTION
    This program perform the release and push the relese with nexus.
It can do following tasks:

 * For making a big release (e.g. 3.Y.Z -> 4.0.0 or 3.7.Z -> 3.8.0 ), run:

   zanata-nexus-staging-<module> -b

   It will commit to both RELEASING_BRANCH and DEVEL_BRANCH, see 
   section ENVIRONMENT for details.

 * For making a Z release (e.g. 3.7.0 -> 3.7.1 ), run 

   zanata-nexus-staging-<module>

   It will commit to RELEASING_BRANCH.

 * If tag is made but release failed, and you fixed it without changing 
   the source, You can resume the release process with 
  
   zanata-nexus-staging-<module> -r


ENVIRONMENT
    RELEASING_BRANCH
      The branch that we recommend downstream to use, and 
      release process should mainly happen here.
      It is:
         'release' if that branch exists; otherwise
         'integration/master' if that branch exists; otherwise
         'master'.
 
    DEVEL_BRANCH 
      The branch for committing new features. It is:
         'integration/master' if that branch exists; otherwise
         'master'.
	
    WORK_ROOT
      The base directory for repository checkout
      As maven release plugin generally require a clean git working tree
      This script will clean it for you.
      Thus it is better not use normal working directory.
	
    REPO_LOCAL_DIR (Optional)
      The directory for maven repo
      This should NOT be your normal work maven repo
	
EXIT_STATUS
END
    ${FUNCTION_SCRIPT_FILE} exit-status-help
}

SCRIPT_DIR=$(dirname $(readlink  -q -f $0))
FUNCTION_SCRIPT_FILE=${SCRIPT_DIR}/zanata-functions
source "${FUNCTION_SCRIPT_FILE}"

BIG_RELEASE=
SKIP_RELEASE_PLUGIN=

while getopts "brh" opt;do
    case $opt in
	h )
	    print_usage
	    exit 0
	    ;;
        b )
	    BIG_RELEASE=1
	    ;;
	r )
	    SKIP_RELEASE_PLUGIN=1
	    ;;
	* )
	    echo "Invalid option $opt" > /dev/stderr
	    exit ${EXIT_FATAL_INVALID_OPTIONS}
	    ;;
    esac
done

shift $((OPTIND-1))
if [ -n "$1" ];then
    MODULE="$1"
fi

case $0 in
    *-tennera)
	MODULE=tennera
        ;;
    *-openprops)
	MODULE=openprops
	;;
    *-parent)
	MODULE=zanata-parent
	;;
    *-api)
	MODULE=zanata-api
	;;
    *-common)
	MODULE=zanata-common
	;;
    *-assets)
	MODULE=zanata-assets
	;;
    *-client)
	MODULE=zanata-client
	;;
    *)
	if [ -z "$MODULE" ]; then
	    print_usage
	    exit ${EXIT_FATAL_INVALID_OPTIONS}
	fi
	;;
esac

if [ ! -d ${WORK_ROOT} ];then
    mkdir -p ${WORK_ROOT}
fi

ensure_repo ${MODULE}
### Determine RELEASING_BRANCH
: ${RELEASING_BRANCH:=$(get_releasing_branch $MODULE)}
echo "### RELEASING_BRANCH for $MODULE is ${RELEASING_BRANCH}"  


: ${DEVEL_BRANCH:=$(get_devel_branch $MODULE)}
echo "### DEVEL_BRANCH for $MODULE is ${DEVEL_BRANCH}"  

cd ${WORK_ROOT}/${MODULE}
git fetch

echo "### [pre-release] ============================== Start"
echo "### [pre-release] updating existing RELEASING_BRANCH (${RELEASING_BRANCH})"
git checkout ${RELEASING_BRANCH}
git pull

echo "### [pre-release] Branch ${RELEASING_BRANCH}: merge origin/${RELEASING_BRANCH}"
git merge origin/${RELEASING_BRANCH} --ff-only --quiet

if [ -n "${BIG_RELEASE}" -a "${RELEASING_BRANCH}" != "master" ];then
    echo "### [pre-release] Branch ${RELEASING_BRANCH}: merge origin/master as we do the big release"
    git merge origin/master --ff-only --quiet

    echo "### [pre-release] Branch ${RELEASING_BRANCH}: pushing back to origin"
    git push origin ${RELEASING_BRANCH}
fi

### Update existing DEVEL_BRANCH on BIG_RELEASE
if [ -n "${BIG_RELEASE}" ]; then
    echo "### Pre-release: update existing DEVEL_BRANCH (${DEVEL_BRANCH}) for big release"
    git checkout ${DEVEL_BRANCH}

    echo "### [pre-release] Branch ${DEVEL_BRANCH} merge origin/${DEVEL_BRANCH}"
    git merge origin/${DEVEL_BRANCH} --ff-only --quiet

    echo "### [pre-release] Branch ${DEVEL_BRANCH}: Create new version"
    mvn -e release:update-versions -DautoVersionSubmodules=true

    git commit $(find . -name 'pom.xml' | xargs ) -m "prepare for next development iteration"
    git push origin ${DEVEL_BRANCH}
    echo "### [pre-release] ${DEVEL_BRANCH} branch updated"
fi

echo "### [pre-release] back to RELEASING_BRANCH (${RELEASING_BRANCH})"
git checkout ${RELEASING_BRANCH}
git fetch --tags
git pull

echo "### [release] ============================== Start"
function release_perform(){
    if [ -z "${SKIP_RELEASE_PLUGIN}" ];then
        git clean -f -d

        ### Other MODULEs might related to zanata-parent
        if [ "$MODULE" != "zanata-parent" ];then
             ensure_repo zanata-parent
        fi
        
        echo "### [release_perform] ============================== Start" 
        echo "###it should sign artifacts, push $MODULE to nexus, then close it"
	mvn -e -Dmaven.repo.local=$REPO_LOCAL_DIR -Dgpg.useagent release:clean release:prepare release:perform -Psonatype-oss-release -DupdateReleaseInfo=true
        if [ $? -ne 0 ];then
	    echo_stderr "### [ERROR]: release goals failed"
	    exit ${EXIT_FATAL_FAIL}
        fi
	echo "### [release_perform] Done"
    fi
    return 0
}

case $MODULE in
    zanata-assets | zanata-parent | zanata-api | zanata-common | zanata-client)
	release_perform

        echo "### [release] nexus-staging:release"
	mvn -e nexus-staging:release -Psonatype-oss-release \
	    -DstagingRepositoryId=$(grep -oP '^stagingRepository\.id=\K.*' target/checkout/target/nexus-staging/staging/*.properties)
	;;
    * )
	### MODULE like tennera or openprops
	### These have only master
	release_perform
	mvn -e nexus-staging:close nexus-staging:release
	;;
esac

