#!/bin/bash -e
### NAME
###     zanata-build-pr - Build pull request
###     zanata-client-build-pr - Build zanata-client pull request
###
### SYNOPSIS
###     zanata-build-pr -h
###     zanata-build-pr [Options] -b <Branch> <repo>
###     zanata-build-pr [Options] -p <GitHubPullRequestNumber> <Module>
###     zanata-build-pr-<Module> -h
###     zanata-build-pr-<Module> [Options] -b <Branch>
###     zanata-build-pr-<Module> [Options] -p <GitHubPullRequestNumber>
### 
### DESCRIPTION
###     This program produce artifact list from m2 repo/
###
### OPTIONS
###     <repo>
###         Repository to build
###         E.g. zanata-client
### 
###     -c:
###        Clean the branch after build
###
###     -b Branch name:
###        Branch name
###        E.g. master
###
###     -p <GitHubPullRequestNumber>:
###        GitHub Pull Request Number
###        E.g. -p 45
### 
### 
### DESCRIPTION
###     zanata-build-br checkouts the corresponding branch in 
###     given branch, then run:
### 
###     mvn -e clean install $ZANATA_MVN_BUILD_OPTIONS
### 
###     zanata-client-build-br is esentially 
### 
###     zanata-build-pr zanata-client -p <GitHubPullRequestNumber>
###
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "$FunctionScriptFile"
trap exit_print_error EXIT
### ENVIRONMENT
###     WORK_ROOT
###       The base directory for repository checkout
###       As maven release plugin generally require a clean git working tree
###       This script will clean it for you.
###       Thus it is better not use normal development directory.
###
###     ZANATA_MVN_BUILD_OPTIONS
###       Default: -DstaticAnalysis
: ${ZANATA_MVN_BUILD_OPTIONS:=-DstaticAnalysis}

##=== parsing Start ===
print_status -t parsing -s "Start"

CleanBranch=0
PullRequestId=0
Branch=

while getopts "hcb:p:" opt;do
    case $opt in
	h )
	    zanata_script_help $0
	    exit ${EXIT_OK}
	    ;;
	c )
	    CleanBranch=1
	    ;;
	b )
	    Branch=$OPTARG
	    ;;
	p )
	    PullRequestId=$OPTARG
	    ;;
	* )
	    failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	    ;;
    esac
done

shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command $1)
echo "moduleResult=$moduleResult"
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

##=== prepare  Start ===
print_status -t prepare -s "Start"

##  Ensure repo
if [ ! -d ${WORK_ROOT} ];then
    mkdir -p ${WORK_ROOT}
fi
ensure_repo ${Module}
cd ${WORK_ROOT}/${Module}

##=== build  Start ===
print_status -t build -s "Start"

if [ -n "$Branch" ];then
    git fetch origin
elif [ -n "$PullRequestId" ];then
    Branch=pr${PullRequestId}merge
    git fetch origin "pull/$PullRequestId/merge:$Branch"
else
    failed $EXIT_FATAL_INVALID_OPTIONS "Neither -b <Branch> nor -p <PullRequest> specified"
fi
git checkout $Branch
mvn -e clean install ${ZANATA_MVN_BUILD_OPTIONS}

if [ $CleanBranch -eq 1 ];then
    git branch -D $Branch
fi

