#!/bin/bash -eu
### NAME
###     zanata-version-update - Update the Zanata dependencies
###
### SYNOPSIS
###     zanata-version-update [Option] [<module>|<artifact> [<branch>]]
###
### DESCRIPTION
###     This program updates pom.xml to use latest release
### of the dependencies in org.zanata
###
### ARGUMENTS
###     <module>: module name like zanata-api
###         If option '-j' is specified, this will be ignored
###
###     <artifact>: artifact like api
###         If option '-j' is specified, this will be ignored
###
###     <branch>: branch to work on. By default it is releasing branch.
###         If option '-j' is specified, this will be ignored
###
###
### OPTIONS
###     -h: Show help.
###
###     -B: Batch mode
###         It will NOT ask question and proceed with default choice.
###
###     -j: Jenkins mode.
###         This assumes that current directory is <module> work directory.
###         and correct branch is checked out.
###
###     -n: Allow Snapshots
###
###     -p: Push after commit
###         Git push when it has commit.
###
### ENVIRONMENT_VARIABLES
###     EXCLUDE_PROPERTIES: A comma separated list of properties to not update.
: ${EXCLUDE_PROPERTIES:=zanata.api.compat.version}

VERSIONS_PLUGIN="org.codehaus.mojo:versions-maven-plugin:2.3"

###
shopt -s globstar
ScriptDir=$(dirname $(readlink  -q -f $0))
FunctionScriptFile=${ScriptDir}/zanata-functions
source "${FunctionScriptFile}"
trap exit_print_error EXIT
ProgramName=$(basename $0)


##=== parsing Start ===
print_status -t "parse" -s "Start"
BatchMode=0
JenkinsMode=0
PushMode=0
AllowSnapshot=0
VersionGoal=use-latest-releases
declare -a ExtraOptionArray=()

while getopts "hBjnp" opt;do
    case $opt in
	h )
	    zanata_script_help $0
	    exit ${EXIT_OK}
	    ;;
	B )
	    BatchMode=1
	    ;;
	j )
	    JenkinsMode=1
	    ;;
	n )
	    AllowSnapshot=1
	    VersionGoal=use-next-versions
	    ExtraOptionArray+=(-DallowSnapshots=true)
	    ;;
	p )
	    PushMode=1
	    ;;
	* )
	    failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	    ;;
    esac
done
shift $((OPTIND-1))


##=== prepare Start ===
print_status -t prepare  -s "Start"
## If not JenkinsMode, then checkout should be done here
if [ $JenkinsMode -eq 0 ];then
    ModuleResult=$(get_module_from_command ${1-})
    Module=$(sed -e 's/ .*//'<<<"$ModuleResult")
    if [[ $ModuleResult == *1 ]];then
	shift
    fi
    print_status " Module=$Module"

    ensure_repo ${Module}

    ## Determine branch
    if [ -n "${1-}" ];then
	Branch=$1
	shift
    else
	## Determine RELEASING_BRANCH
	Branch=$(get_releasing_branch $Module)
    fi
    print_status " Branch is $Branch"

    checkout_branch $Module "$Branch" $WORK_ROOT
    cd "$WORK_ROOT/$Module"
fi

##=== update Start ===
print_status -t update  -s "Start"

CmdOptArray=( ${VERSIONS_PLUGIN}:update-parent ${ExtraOptionArray[@]-})
print_status " ${CmdOptArray[*]}"
mvn "${CmdOptArray[@]}"

CmdOptArray=( ${VERSIONS_PLUGIN}:$VersionGoal '-Dincludes=org.zanata:*' ${ExtraOptionArray[@]-} )
print_status " ${CmdOptArray[*]}"
mvn "${CmdOptArray[@]}"

CmdOptArray=( ${VERSIONS_PLUGIN}:update-properties '-Dincludes=org.zanata:*' '-DincludeProperties=zanata.assets.version' '-DexcludeProperties=${EXCLUDE_PROPERTIES}' ${ExtraOptionArray[@]-} )
set -x
mvn "${CmdOptArray[@]}"
set +x

if ! git diff --exit-code ;then
    if [ $BatchMode -eq 0 ];then
	read -p "### Are the change looks alright? Press [Ctrl-C] to break, [Enter] to continue"
    fi
    git commit -a -m "chore(version): Update Zanata dependencies"
    if [ $PushMode -ge 1 ];then
	git push
    else
	exit ${EXIT_RETURN_FALSE}
    fi
else
    print_status " No change detected"
fi
exit ${EXIT_OK}

