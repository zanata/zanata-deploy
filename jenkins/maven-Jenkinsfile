#!/usr/bin/env groovy
/**
 * Jenkinsfile for zanata-scripts
 */

@Field
public static final String REPO_NAME = "zanata-platform"

@Field
public static final String PROJ_BASE = 'github.com/zanata/zanata-platform'

@Field
public static final String ZANATA_SCRIPTS_BASE = 'github.com/zanata/zanata-scripts'

@Field
public static final String ARTIFACT_ID = "platform"

// The projects that provides version (the others just use project.version)
@Field
public static final String MAVEN_VERSION_PROJECTS = 'build-tools,parent'

@Field
public static final String MAVEN_RELEASE_OPTIONS = "-Dallow.deploy.skip=false -Dcheckstyle.skip=true " +
  "-Denforcer.skip=true -Dfindbugs.skip=true " +
  "-Dgpg.executable=gpg2 -Dgpg.useagent=true " +
  "-Doptimise "+
  "-DskipArqTests=true -DskipFuncTests=true -DskipTests=true " +
  "-DupdateReleaseInfo=true " +
  "-Prelease"

// The projects to be release to nexus
@Field
public static final String NEXUS_RELEASE_PROJECTS = '!server/zanata-test-war,!server/functional-test'

@Field
public static final String NEXUS_STAGING_OPTIONS = '-e -DnexusUrl=https://oss.sonatype.org/ -DserverId=sonatype-staging -Prelease'

@Field
public static final String NEXUS_STAGING_PLUGIN = 'org.sonatype.plugins:nexus-staging-maven-plugin'

// TODO: restore to master
@Field
public static final String ZANATA_SCRIPTS_BRANCH = 'ZNTA-1803-maven-release-pipeline'

@Field
public static final String PROJ_BRANCH = 'release'

@Field
public static final String PIPELINE_LIBRARY_BRANCH = 'v0.3.1'

@Library('github.com/zanata/zanata-pipeline-library@v0.3.1')
import org.zanata.jenkins.Notifier
import org.zanata.jenkins.PullRequests
import org.zanata.jenkins.ScmGit
import static org.zanata.jenkins.StackTraces.getStackTrace

import groovy.transform.Field

@Field
def pipelineLibraryScmGit

@Field
def zanataScriptScmGit

@Field
def mainScmGit

@Field
def notify

@Field
def jobName

String[] getStagingRepositoryData(){
  String[] lines = sh(returnStdout: true,
    script: "./mvnw $MAVEN_EXTRA_OPTIONS $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:rc-list | sed -n -e '/orgzanata-.* / p'"
  )?.split('\n')
  String[] results = new String[2];
  for(int i=0; i< lines.length ; i++) {
    echo "stagingRepository=${lines[i]}"
    String[] tokens = lines[i].split()
    if (tokens.length < 2) {
      continue
    }
    // tokens[1]: id, tokens[2] state
    results[0] = new String(tokens[1])
    results[1] = new String(tokens[2])
  }
  return results
}


timestamps {
// We need a node with release label
  node('release') {
    currentBuild.displayName = currentBuild.displayName + " {${env.NODE_NAME}}"
    ansiColor('xterm') {
      pipelineLibraryScmGit = new ScmGit(env, steps, 'https://github.com/zanata/zanata-pipeline-library')
      pipelineLibraryScmGit.init(PIPELINE_LIBRARY_BRANCH)
      zanataScriptsScmGit = new ScmGit(env, steps, "https://$ZANATA_SCRIPTS_BASE")
      zanataScriptsScmGit.init(ZANATA_SCRIPTS_BRANCH)
      mainScmGit = new ScmGit(env, steps, "https://$PROJ_BASE")
      mainScmGit.init(PROJ_BRANCH)
      notify = new Notifier(env, steps, currentBuild,
          pipelineLibraryScmGit, mainScmGit, 'zanata-scripts-release',
      )

      jobName = env.JOB_NAME
      def projectProperties = [
        [
          $class: 'BuildDiscarderProperty',
          strategy: [$class: 'LogRotator',
            numToKeepStr: '20',        // keep records for at most X builds
            artifactDaysToKeepStr: '', // keep artifacts no more than X days
            artifactNumToKeepStr: '10', // keep artifacts for at most X builds
          ]
        ],
        [$class: 'GithubProjectProperty',
          projectUrlStr: "https://${PROJ_BASE}"
        ],
        [$class: 'ParametersDefinitionProperty',
          parameterDefinitions: [
            [$class: 'StringParameterDefinition',
              defaultValue: 'auto',
              description: 'Version to release like "4.4.0", "4.4.0-alpha-1", or "auto" to release the SNAPSHOT',
              name: 'RELEASE_VERSION'
            ],
            [$class: 'StringParameterDefinition',
              defaultValue: '-T 1',
              description: 'Maven extra options',
              name: 'MAVEN_EXTRA_OPTIONS'
            ],
            [$class: 'BooleanParameterDefinition',
              defaultValue: false,
              description: 'Dryrun mode does not push to GitHub and sonatype',
              name: 'IS_DRYRUN'
            ],
          ]
        ],
      ]

      properties(projectProperties)
    }

    String releaseVersion = params.RELEASE_VERSION
    String developmentVersion = null
    String tagName

    withEnv(["WORK_ROOT=${env.HOME}/zanata-work-root", "ZANATA_GIT_URL_PREFIX=https://github.com/zanata"]) {
      stage('Checkout') {
        // Checkout and test GPG
        notify.started()

          // Note that this checkout zanata-scripts
        checkout scm

        sh "bash $WORKSPACE/zanata-functions run ensure_repo $REPO_NAME"
        sh "bash $WORKSPACE/zanata-functions run checkout_branch $REPO_NAME $PROJ_BRANCH $WORK_ROOT"
        // Match the origin/release

    // Remove tag (possibly from a failed build)
        dir("${WORK_ROOT}/${REPO_NAME}") {
          sh "git reset --hard origin/$PROJ_BRANCH"
          sh "git clean -fdx"
          if (params.RELEASE_VERSION == 'auto') {
            releaseVersion = readMavenPom(file: "${WORK_ROOT}/${REPO_NAME}/parent/pom.xml").getVersion().replaceAll('-SNAPSHOT', '')
          }

          tagName = "${ARTIFACT_ID}-${releaseVersion}"

          developmentVersion = (sh(returnStdout: true,
            script: "bash $WORKSPACE/zanata-functions run version_next $releaseVersion").trim()) + '-SNAPSHOT'
          echo "Release Version=$releaseVersion     Development Version=$developmentVersion"

          // Is this version already been tag/build ?
          String remoteTagLine = sh(returnStdout: true,
            script: "git ls-remote https://github.com/zanata/$REPO_NAME refs/tags/${tagName}")?.trim()
          if ( remoteTagLine ){
            error "tag ${tagName} is already in remote"
          }

          String localTagLine = sh(returnStdout: true,
            script: "git ls-remote . refs/tags/${tagName}")?.trim()
          if ( localTagLine ){
            sh "git tag -d $tagName"
          }
        }
      }

      dir ("${WORK_ROOT}/${REPO_NAME}") {
        String releaseNoteVersion = releaseVersion.replaceAll('-.*','')
        stage('ReleaseNotes') {
          notify.startBuilding()
          echo "releaseNoteVersion: $releaseNoteVersion"
          def releaseNoteStatus = sh(returnStatus: true,
            script: "bash $WORKSPACE/zanata-release-notes-prepend -j $ARTIFACT_ID $releaseNoteVersion",
          )
          echo "releaseNoteStatus: $releaseNoteVersion"
          switch(releaseNoteStatus){
            case 0: // EXIT_OK
              // ReleaseNotes updated. Git commit is done by zanata-release-notes-prepend
              break
            case 40: // EXIT_RETURN_FALSE
              // ReleaseNotes does not changed
              break
            default:
              error "Status($releaseNoteStatus) Failed to get related jira issues"
              break
          }
        }

        stage('SetReleaseVersion') {
          sh "sed -i -e 's|<tag>HEAD</tag>|<tag>${tagName}</tag>|' \$(find . -name pom.xml | xargs )"
          sh "./mvnw $MAVEN_EXTRA_OPTIONS $MAVEN_RELEASE_OPTIONS -pl $MAVEN_VERSION_PROJECTS versions:set -DnewVersion=$releaseVersion"
      sh "git commit -a -m 'chore(version): set version $releaseVersion'"
          String docZanataOrgVersionAnchor=releaseNoteVersion.replaceAll('\\.', '')
          sh "git tag -a -m 'http://docs.zanata.org/en/release/release-notes/#${docZanataOrgVersionAnchor}' ${tagName}"
        }
        stage('MavenDeploy') {
          String goal = 'deploy'
          if (params.IS_DRYRUN) {
            goal = 'verify'
          }
          sh "./mvnw $MAVEN_EXTRA_OPTIONS $MAVEN_RELEASE_OPTIONS -pl $NEXUS_RELEASE_PROJECTS $goal"
        }
        stage('NexusRelease') {
          // If not DRYRUN, this will closed the OPEN repo, and release the CLOSED repo.
          while(! params.IS_DRYRUN) {
            String[] stagingRepositoryResults = getStagingRepositoryData()
            stagingRepositoryId = stagingRepositoryResults[0]
            stagingRepositoryState = stagingRepositoryResults[1]
            echo "stagingRepositoryId=$stagingRepositoryId   stagingRepositoryState=$stagingRepositoryState"
            switch(stagingRepositoryState) {
              case "OPEN":
                sh """
                  ./mvnw $MAVEN_EXTRA_OPTIONS $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:close\
                    -DstagingRepositoryId=$stagingRepositoryId
                  """
                break
              case "CLOSED":
                sh """
                  ./mvnw $MAVEN_EXTRA_OPTIONS $NEXUS_STAGING_OPTIONS ${NEXUS_STAGING_PLUGIN}:release\
                    -DstagingRepositoryId=$stagingRepositoryId
                  """
                  break
                default:
                  break
            }
            if (stagingRepositoryState != 'OPEN' && stagingRepositoryState != 'CLOSED') {
              break
            }
          }
        }
        stage('SetSnapshotVersion') {
          sh "sed -i -e 's|<tag>.*</tag>|<tag>HEAD</tag>|' \$(find . -name pom.xml | xargs )"
          sh "./mvnw $MAVEN_EXTRA_OPTIONS $MAVEN_RELEASE_OPTIONS -pl $MAVEN_VERSION_PROJECTS versions:set -DnewVersion=$developmentVersion"
          sh "git commit -a -m 'chore(version): set version $developmentVersion'"
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding',
              credentialsId: 'zanata-jenkins',
              usernameVariable: 'GIT_USERNAME', passwordVariable: 'GITHUB_OAUTH2_TOKEN'
            ]
          ]) {
            if (! params.IS_DRYRUN) {
              sh "git push --follow-tags https://$GIT_USERNAME:$GITHUB_OAUTH2_TOKEN@${PROJ_BASE} release"
            }
          }
        }
      }
      stage('Archive') {
        sh("bash $WORKSPACE/zanata-artifact-m2repo -l | sort -u > artifact-list.txt")
        archiveArtifacts(artifacts: 'artifact-list.txt')
      }
    }
  }
}


