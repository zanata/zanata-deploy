#!/usr/bin/env groovy
/**
 * Jenkinsfile for zanata-scripts
 */

@Field
public static final String REPO_NAME = "zanata-platform"

@Field
public static final String PROJ_BASE = 'github.com/zanata/zanata-platform'

@Field
public static final String PROJ_BRANCH = 'release'

@Field
public static final String ZANATA_SCRIPTS_BASE = 'github.com/zanata/zanata-scripts'

// The projects that provides version (the others just use project.version)

// The projects to be release to nexus
// TODO: restore to master
@Field
public static final String ZANATA_SCRIPTS_BRANCH = 'ZNTA-1803-maven-release-pipeline'

@Field
public static final String PIPELINE_LIBRARY_BRANCH = 'v0.3.1'

@Library('github.com/zanata/zanata-pipeline-library@v0.3.1')
import org.zanata.jenkins.Notifier
import org.zanata.jenkins.PullRequests
import org.zanata.jenkins.ScmGit
import static org.zanata.jenkins.StackTraces.getStackTrace

import groovy.transform.Field

@Field
def pipelineLibraryScmGit

@Field
def zanataScriptScmGit

@Field
def mainScmGit

@Field
def notify

@Field
def jobName

timestamps {
// We need a node with release label
  node('release') {
    currentBuild.displayName = currentBuild.displayName + " {${env.NODE_NAME}}"
    ansiColor('xterm') {
      pipelineLibraryScmGit = new ScmGit(env, steps, 'https://github.com/zanata/zanata-pipeline-library')
      pipelineLibraryScmGit.init(PIPELINE_LIBRARY_BRANCH)
      zanataScriptsScmGit = new ScmGit(env, steps, "https://$ZANATA_SCRIPTS_BASE")
      zanataScriptsScmGit.init(ZANATA_SCRIPTS_BRANCH)
      mainScmGit = new ScmGit(env, steps, "https://$PROJ_BASE")
      mainScmGit.init(PROJ_BRANCH)
      notify = new Notifier(env, steps, currentBuild,
          pipelineLibraryScmGit, mainScmGit, 'zanata-scripts-release',
      )

      jobName = env.JOB_NAME
      def projectProperties = [
        [
          $class: 'BuildDiscarderProperty',
          strategy: [$class: 'LogRotator',
            numToKeepStr: '20',        // keep records for at most X builds
            artifactDaysToKeepStr: '', // keep artifacts no more than X days
            artifactNumToKeepStr: '10', // keep artifacts for at most X builds
          ]
        ],
        [$class: 'GithubProjectProperty',
          projectUrlStr: "https://${PROJ_BASE}"
        ],
        [$class: 'ParametersDefinitionProperty',
          parameterDefinitions: [
            [$class: 'StringParameterDefinition',
              defaultValue: 'auto',
              description: 'Version to release like "4.4.0", "4.4.0-alpha-1", or "auto" to release the SNAPSHOT',
              name: 'RELEASE_VERSION'
            ],
            [$class: 'StringParameterDefinition',
              defaultValue: '-T 1',
              description: 'Maven extra options',
              name: 'MAVEN_EXTRA_OPTIONS'
            ],
            [$class: 'StringParameterDefinition',
              defaultValue: 'testBuild',
              description: '"" for build and commit; "testBuild" for build but not commit; "dryRun" for knowing commands to be run ',
              name: 'ZANATA_RELEASE_MODE'
            ],
          ]
        ],
      ]

      properties(projectProperties)
    }


    if (params.ZANATA_RELEASE_MODE != "" ){
      currentBuild.displayName = currentBuild.displayName + " [${params.ZANATA_RELEASE_MODE}]"
    }

    def envArray = new ArrayList()
    envArray.addAll(
        sh( returnStdout: true,
        script: "curl -q https://raw.githubusercontent.com/zanata/zanata-scripts/$ZANATA_SCRIPTS_BRANCH/zanata-env.sh | sed -rn -e '/[A-Z_]*=/ s/^[^A-Z_]*([A-Z_]*=[^}]*)/\\1/p' ",
      )?.split("\n")
    )

    envArray.addAll([
      "MAVEN_EXTRA_OPTIONS=${params.MAVEN_EXTRA_OPTIONS}",
      "WORK_ROOT=${env.HOME}/zanata-work-root",
      "ZANATA_GIT_URL_PREFIX=https://github.com/zanata",
      "ZANATA_RELEASE_MODE=${params.ZANATA_RELEASE_MODE}",
    ])

    if (params.ZANATA_RELEASE_MODE == 'dryRun') {
      envArray.add("DryRunMode=1")
    }

    withEnv(envArray) {
      String artifactId = REPO_NAME.replaceAll('zanata-','')
      String releaseVersion = null
      String developmentVersion = null
      String tagName = null

      echo "MAVEN_RELEASE_OPTIONS=$env.MAVEN_RELEASE_OPTIONS"
      stage('Checkout') {
        // Checkout and test GPG
        notify.started()

          // Note that this checkout zanata-scripts
        checkout scm

        sh "bash $WORKSPACE/zanata-functions run ensure_repo $REPO_NAME"
        sh "bash $WORKSPACE/zanata-functions run checkout_branch $REPO_NAME $PROJ_BRANCH $WORK_ROOT"
        // Match the origin/release

    // Remove tag (possibly from a failed build)
        dir("${WORK_ROOT}/${REPO_NAME}") {
          sh "git reset --hard origin/$PROJ_BRANCH"
          sh "git clean -fdx"
          if (params.RELEASE_VERSION == 'auto') {
            releaseVersion = readMavenPom(file: "${WORK_ROOT}/${REPO_NAME}/parent/pom.xml").getVersion().replaceAll('-SNAPSHOT', '')
          } else {
            releaseVersion = params.RELEASE_VERSION
          }
          tagName = "${artifactId}-${releaseVersion}"

          developmentVersion = (sh(returnStdout: true,
            script: "bash $WORKSPACE/zanata-functions run version_next $releaseVersion").trim()) + '-SNAPSHOT'
          echo "Release Version=$releaseVersion     Development Version=$developmentVersion"

          // Is this version already been tag/build ?
          String remoteTagLine = sh(returnStdout: true,
            script: "git ls-remote https://github.com/zanata/$REPO_NAME refs/tags/${tagName}")?.trim()
          if ( remoteTagLine ){
            error "tag ${tagName} is already in remote"
          }

          def tagExistExitStatus = sh(returnStatus: true,
            script: "git show-ref ${tagName}")
          if ( tagExistExitStatus == 0 ){
            // Tag exists
            sh "git tag -d $tagName"
          }
        }
      }

      dir ("${WORK_ROOT}/${REPO_NAME}") {
        String releaseNoteVersion = releaseVersion.replaceAll('-.*','')
        stage('ReleaseNotes') {
          notify.startBuilding()
          echo "releaseNoteVersion: $releaseNoteVersion"
          def releaseNoteStatus = sh(returnStatus: true,
            script: "bash $WORKSPACE/zanata-release-notes-prepend -j $artifactId $releaseNoteVersion",
          )
          echo "releaseNoteStatus: $releaseNoteVersion"
          switch(releaseNoteStatus){
            case 0: // EXIT_OK
              // ReleaseNotes updated. Git commit is done by zanata-release-notes-prepend
              break
            case 40: // EXIT_RETURN_FALSE
              // ReleaseNotes does not changed
              break
            default:
              error "Status($releaseNoteStatus) Failed to get related jira issues"
              break
          }
        }

        stage('SetReleaseVersion') {
          sh(returnStatus: true,
            script: "bash $WORKSPACE/zanata-pom-set-version ${artifactId}- $releaseVersion $PLATFORM_MAVEN_VERSION_PROJECT",
          )
        }
        stage('Nexus') {
          sh "bash $WORKSPACE/zanata-nexus $PLATFORM_MAVEN_NEXUS_RELEASE_PROJECTS"
        }
        //stage('NexusStaging') {
        //  sh "bash $WORKSPACE/zanata-nexus-staging $PLATFORM_MAVEN_NEXUS_RELEASE_PROJECTS"
        //}
        //stage('NexusRelease') {
        //  sh "bash $WORKSPACE/zanata-nexus-release"
        //}
        stage('SetSnapshotVersion') {
          sh(returnStatus: true,
            script: "bash $WORKSPACE/zanata-pom-set-version ${artifactId}- $developmentVersion $PLATFORM_MAVEN_VERSION_PROJECT",
          )
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding',
              credentialsId: 'zanata-jenkins',
              usernameVariable: 'GIT_USERNAME', passwordVariable: 'GITHUB_OAUTH2_TOKEN'
            ]
          ]) {
            if ( params.ZANATA_RELEASE_MODE == '') {
              sh "git push --follow-tags https://$GIT_USERNAME:$GITHUB_OAUTH2_TOKEN@${PROJ_BASE} release"
            }
          }
        }
      }
      stage('ArtifactList') {
        sh("bash $WORKSPACE/zanata-artifact-m2repo -l | sort -u > artifact-list.txt")
        archiveArtifacts(artifacts: 'artifact-list.txt')
      }
    }
  }
}


