#!/bin/bash -eu
set -o pipefail
LANG=C
### NAME
###     zanata-package-fedora - Release package in fedora
###
### SYNOPSIS
###     zanata-package-fedora [Options] <module> [version-release]
###
### ARGUMENTS
###     module: module to release in Fedora. It is also the Fedora package name.
###
###     version-release: (Required if -a is not specified)
###         Version and SPEC release field. For example, 3.7.2-2
###         This is mandatory when bumping SPEC release number.
###
### OPTIONS
###     -h: Show this help.
###
###     -a: Automatic detected.
###         Version will be detected from latest tag from git.
###         And release is 1.
###
### ENVIRONMENT
###     FEDPKG_DIR
###         Which directory should the fedpkg clone take place
###         Default: ${HOME}/FedPkg}
: ${FEDPKG_DIR:=${HOME}/FedPkg}
###
###     FEDORA_USERNAME
###         Required if your Fedora username is different from $USER
###         Default: ${USER}
: ${FEDORA_USER:=${USER}}
###
###     MAINTAINER_EMAIL
###         Required if your Fedora username is different from $USER
###         Default: ${FEDORA_USER}@fedorapeople.org
: ${MAINTAINER_EMAIL:=${FEDORA_USER}@fedorapeople.org}
###
### DESCRIPTION
###     This program builds and submits the latest Zanata modules
###     that are not yet in supported Fedora branches.
###
###     It invokes bodhi for Fedora submission check and koji for Fedora build.
###     It also requests buildroot override for 30 days for non-leaf modules
###     like zanata-parent, zanata-api and zanata-common.
###
###     If a new version tag have been created in module source Git,
###     you can use option '-a', so you don't have to enter version-release.
###
###     However, if did not change source but modify spec or apply patch
###     in RPM SPEC, then you cannot use '-a'
###     and you need to specify version-release.
###

## Variables
SpecRelease=1

SCRIPT_DIR=$(dirname $(readlink  -q -f $0))
FUNCTION_SCRIPT_FILE="${SCRIPT_DIR}/zanata-functions"
source "${FUNCTION_SCRIPT_FILE}"
trap exit_print_error EXIT
source "${SCRIPT_DIR}/zanata-rpm-functions"

##=== function definitions Start ===
# is pkgBuild been built in koji
# Valid pkgBuild example: cmake-fedora-1.4.0-1.fc21
function is_branch_build_in_koji(){
    local branch=$1
    local bodhiBranch=$(branch_to_bodhi_branch $branch)
    local pkgBuild="$Nvr.${bodhiBranch}"
    print_status -n " koji: is ${pkgBuild} in? ... "

    if koji buildinfo $pkgBuild | grep -qcs -i "State: COMPLETE" ;then
        print_status "yes, skip"
        return 0
    fi
    print_status "no, will submit it"
    return 1
}

# is pkgBuild in bodhi
# Valid pkgBuild example: cmake-fedora-1.4.0-1.fc21
function is_branch_build_in_bodhi(){
    local branch=$1
    local bodhiBranch=$(branch_to_bodhi_branch $branch)
    local pkgBuild="$Nvr.${bodhiBranch}"
    print_status -n " bodhi: is ${pkgBuild} in? ... "
    if bodhi "${pkgBuild}" | grep -qcs -i "Submit" > /dev/null;then
        print_status "yes, skip"
    fi
    print_status "no, will submit it"
    return 1
}

##=== function definitions End   ===

##=== parsing Start ===
print_status -t parsing -s "Start"

Version=
SpecRelease=
AutoDetect=0
while getopts "ha" opt;do
    case $opt in
        h )
            zanata_script_help $0
            exit ${EXIT_OK}
            ;;
        a )
            AutoDetect=1
            ;;
        * )
            exit_if_failed ${EXIT_FATAL_INVALID_OPTIONS} ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
            ;;
    esac
done
shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command ${1-})
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

## Get Version
if [ ${AutoDetect} -eq 0 ];then
    if [ -z "${1-}" ];then
        zanata_script_help $0
        EXIT_MSG="Requires version-release. Please either specify version-release or use option -a"
        exit ${EXIT_FATAL_INVALID_OPTIONS}
    fi
    VersionRelease=$1

    EXIT_MSG="VersionRelease $VersionRelease is invalid"
    SpecRelease=$(sed -n 's/.*-\([0-9]*\)$/\1/p' <<<$VersionRelease)
    EXIT_MSG=

    test -n "$SpecRelease"
    exit_if_failed "$?" ${EXIT_FATAL_INVALID_OPTION} "Failed to get SPEC release from ${VersionRelease}"
    Version=$(sed -e 's/-'$SpecRelease'$//' <<<$VersionRelease)
    test -n "$Version"
    exit_if_failed "$?" ${EXIT_FATAL_INVALID_OPTION} "Failed to get version from ${VersionRelease}"
else
    ## Auto detect version
    Version=$(zanata-version-get-latest -q $Module)
    print_status " ${Module} version: $Version"

    test -n "$Version"
    exit_if_failed "$?" ${EXIT_FATAL_FAIL} "Failed to get version from ${Module} git repo"
    SpecRelease=1
fi
print_status " Version=$Version"
print_status " SpecRelease=$SpecRelease"

##=== prepare Start ===
print_status -t prepare -s "Start"

print_status " Prepare fedpkg ${Module} git repo"
mkdir -p ${FEDPKG_DIR}
cd ${FEDPKG_DIR}

if [ -d ${Module} ];then
    cd ${Module}
    git reset --hard HEAD
    fedpkg switch-branch master
    git pull
    git fetch --tags
else
    fedpkg clone ${Module}
    cd ${Module}
fi

##=== SRPM Start ===
print_status -t "SRPM" -s "Start"
print_status " updating SPEC"
spec_update $Module.spec $Version $SpecRelease $MAINTAINER_EMAIL

print_status " removing old zip and rpm"
rm -fv *.zip
rm -fv *.rpm

print_status " downloading files"
spectool -g $Module.spec

fedpkg srpm
git reset --hard HEAD
Srpm=$Module-$Version-$SpecRelease.fc$RawhideVersion.src.rpm
echo "$Srpm"
test -r $Srpm
exit_if_failed $? $EXIT_FATAL_FAIL " Failed to create SRPM $Srpm"

##=== Build Start ===
print_status -t "Build" -s "Start"
cmake-fedora-fedpkg $Srpm fedora

##=== Buildroot Override ===
if [ $Module != "zanata-server" ];then
    print_status -t "Buildroot Override" -s "Start"
    for bodhiBranch in $(cmake-fedora-koji bodhi-branch fedora | xargs );do
        bodhi --buildroot-override $Module-$Version-$SpecRelease.$bodhiBranch
    done
    bodhi --buildroot-override 
fi

