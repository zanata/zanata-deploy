#!/bin/bash -e
set -o 'pipefail'
LANG=C
### NAME
###     zanata-package-fedora - Release package in fedora
###
### SYNOPSIS
###     zanata-package-fedora [Options] <module> [version-release]
###
### ARGUMENTS
###     module: module to release in Fedora. It is also the Fedora package name.
###
###     version-release: (Required if -a is not specified) 
###         Version and SPEC release field. For example, 3.7.2-2
###         This is mandatory when bumping SPEC release number.
###
### OPTIONS
###     -h: Show this help.
###
###     -a: Automatic detected.
###         Version will be detected from latest tag from git. 
###         And release is 1.
### 
### ENVIRONMENT
###     FEDPKG_DIR
###         Which directory should the fedpkg clone take place
###         Default: ${HOME}/FedPkg}
: ${FEDPKG_DIR:=${HOME}/FedPkg}
###
###     FEDORA_USERNAME
###         Required if your Fedora username is different from $USER
###         Default: ${USER}
: ${FEDORA_USER:=${USER}}
###
###     MAINTAINER_EMAIL
###         Required if your Fedora username is different from $USER
###         Default: ${FEDORA_USER}@fedorapeople.org
: ${MAINTAINER_EMAIL:=${FEDORA_USER}@fedorapeople.org}
###
### DESCRIPTION
###     This program builds and submits the latest Zanata modules
###     that are not yet in supported Fedora branches.
###
###     It invokes bodhi for Fedora submission check and koji for Fedora build.
###     It also requests buildroot override for 30 days for non-leaf modules
###     like zanata-parent, zanata-api and zanata-common.
###
###     If a new version tag have been created in module source Git, 
###     you can use option '-a', so you don't have to enter version-release.
###
###     However, if did not change source but modify spec or apply patch
###     in RPM SPEC, then you cannot use '-a'
###     and you need to specify version-release.
###

## Default Environment Variable
: ${SpecRelease:=1}

SCRIPT_DIR=$(dirname $(readlink  -q -f $0))
FUNCTION_SCRIPT_FILE="${SCRIPT_DIR}/zanata-functions"
source "${FUNCTION_SCRIPT_FILE}"
trap exit_print_error EXIT
source "${SCRIPT_DIR}/zanata-rpm-functions"

##=== function definitions Start ===
# is pkgBuild been built in koji
# Valid pkgBuild example: cmake-fedora-1.4.0-1.fc21
function is_branch_build_in_koji(){
    local branch=$1
    local bodhiBranch=$(branch_to_bodhi_branch $branch)
    local pkgBuild="$Nvr.${bodhiBranch}"
    print_status -n " koji: is ${pkgBuild} in? ... "

    if koji buildinfo $pkgBuild | grep -qcs -i "State: COMPLETE" ;then
	print_status "yes, skip"
    else
	print_status "no, will submit it"
	FedpkgBuildBranches+=" $branch"
    fi
}

# is pkgBuild in bodhi
# Valid pkgBuild example: cmake-fedora-1.4.0-1.fc21
function is_branch_build_in_bodhi(){
    local branch=$1
    local bodhiBranch=$(branch_to_bodhi_branch $branch)
    local pkgBuild="$Nvr.${bodhiBranch}"
    print_status -n " bodhi: is ${pkgBuild} in? ... "
    if bodhi "${pkgBuild}" | grep -qcs -i "Submit" > /dev/null;then
	print_status "yes, skip"
    else
	print_status "no, will submit it"
	BodhiPushList+=" ${pkgBuild}"
    fi
}

function prepare_fedpkg_git_repo(){
    print_status " Prepare fedpkg ${Module} git repo"
    if [ ! -d ${FEDPKG_DIR} ];then
	mkdir -p ${FEDPKG_DIR}
    fi
    cd ${FEDPKG_DIR}

    if [ -d ${Module} ];then
	cd ${Module}
	fedpkg switch-branch master
	git reset --hard HEAD
	git pull
	git fetch --tags
    else
	fedpkg clone ${Module}
	cd ${Module}
    fi
}
##=== function definitions End   ===

##=== parsing Start ===
print_status -t parsing -s "Start"

Version=
SpecRelease=
AUTO_DETECT=0
while getopts "ha" opt;do
    case $opt in
	h )
	    zanata_script_help $0
	    exit ${EXIT_OK}
	    ;;
	a )
	    AUTO_DETECT=1
	    ;;
	* )
	    exit_if_failed ${EXIT_FATAL_INVALID_OPTIONS} ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	    ;;
    esac
done
shift $((OPTIND-1))

## Get Module
moduleResult=$(get_module_from_command $1)
Module=$(sed -e 's/ .*//'<<<"$moduleResult")
if [[ $moduleResult == *1 ]];then
    shift
fi
print_status " Module=$Module"

## Get Version
if [ ${AUTO_DETECT} -eq 0 ];then
    if [ -z "$1" ];then
	zanata_script_help $0
	EXIT_MSG="Requires version-release. Please either specify version-release or use option -a"
	exit ${EXIT_FATAL_INVALID_OPTIONS}
    fi
    VersionRelease=$1

    EXIT_MSG="VersionRelease $VersionRelease is invalid"
    SpecRelease=$(sed -n 's/.*-\([0-9]*\)$/\1/p' <<<$VersionRelease)
    EXIT_MSG=

    test -n "$SpecRelease"
    exit_if_failed "$?" ${EXIT_FATAL_INVALID_OPTION} "Failed to get SPEC release from ${VersionRelease}"
    Version=$(sed -e 's/-'$SpecRelease'$//' <<<$VersionRelease)
    test -n "$Version"
    exit_if_failed "$?" ${EXIT_FATAL_INVALID_OPTION} "Failed to get version from ${VersionRelease}"
else
    ## Auto detect version
    Version=$(detect_module_version ${Module})
    print_status " ${Module} version: $Version"

    test -n "$Version"
    exit_if_failed "$?" ${EXIT_FATAL_FAIL} "Failed to get version from ${Module} git repo"
    SpecRelease=1
fi
print_status " Version=$Version"
print_status " SpecRelease=$SpecRelease"

##=== prepare Start ===
print_status -t prepare -s "Start"

### Check depended programs
ExitStatus=${EXIT_OK}
for dep in awk koji fedpkg bodhi; do
    if ! which $dep &>/dev/null ; then
	ExitStatus=${EXIT_FATAL_MISSING_DEPENDENCIES}
	EXIT_MSG+=" $dep"
    fi
done
exit_if_failed "${ExitStatus}" ${EXIT_FATAL_MISSING_DEPENDENCIES} "$EXIT_MSG"

##=== determine-task Start ===
## Find what need to build with bodhi and fedpkg
Stage=determine-task
print_status -t "determine-task" -s "Start"

Nvr=${Module}-${Version}-${SpecRelease}
FedpkgBuildBranches=
BodhiPushList=

## Is pkgBuild in rawhide/master in koji?
is_branch_build_in_koji master

## Is build in branches?
for branch in ${SupportedKojiTargets};do
    print_status " branch: ${branch}"
    is_branch_build_in_koji ${branch}

    is_branch_build_in_bodhi ${branch}
done

##=== fedpkg Start ===
## if fedpkg build is required
if [ -n "${FedpkgBuildBranches}" ];then
    print_status -t fedpkg -s "Start"

    ## Prepare FedPkg Git Repo
    prepare_fedpkg_git_repo

    print_status " Branches to build in FedPkg: ${FedpkgBuildBranches}"
    for branch in ${FedpkgBuildBranches}; do
	fedpkg switch-branch ${branch}
	if [ "$branch" = "master" ];then
	    ## In master, ensure scratch build work for available branch
	    spec_update ${Module}.spec ${Version} ${SpecRelease} "${MAINTAINER_EMAIL}"

	    print_status " spectool: Getting list of source file(s)"
	    sourceFiles=$(spectool -l -S "${TmpSpecPath}" | sed -e 's!.*/!!' | xargs)

	    print_status " spectool: Downloading source file(s): ${sourceFiles}"
	    spectool -g -S "${TmpSpecPath}"

	    if [ $SpecModified -eq 1 ];then
		print_status " copy modified spec back"
		cp -v "${TmpSpecPath}" ${Module}.spec
	    fi

	    print_status " making SRPM"
	    srpmFile=$(fedpkg srpm | sed -n -e 's!^.*/!!p')
	    test -n "${srpmFile}"
	    exit_if_failed "$?" $EXIT_FATAL_FAIL "${Module}.spec: failed to get SRPM file"

	    ## Scratch build
	    print_status " scratch-build: ${srpmFile}"
	    for t in $(branches_to_koji_targets ${FedpkgBuildBranches}); do
		print_status " scratch-build: target $t"
		fedpkg scratch-build --target $t --srpm "${srpmFile}"

		if [ $? -ne 0 ];then
		    ExitStatus=${EXIT_ERROR_FAIL}
		    print_status " scratch-build: Failed on $t"
		fi
	    done
	    exit_if_failed "${ExitStatus}" ${EXIT_ERROR_FAIL} "scratch-build: at least one build failed"

	    ## Scratch build success, fedpkg commit and push
	    if [ $SpecModified -eq 1 ];then
		print_status " fedpkg-commit"
		fedpkg new-sources ${sourceFiles}
		git add ${Module}.spec
		fedpkg commit -m "Release ${Module}-${Version}-${SpecRelease}" -p
	    fi
	else
	    ## Assume master is done.
	    git merge master
	    exit_if_failed "$?" ${EXIT_ERROR_FAIL} "${branch}: merge master failed"
	fi

	if [ $SpecModified -eq 1 ];then
	    fedpkg push
	    exit_if_failed "$?" ${EXIT_ERROR_FAIL} "${branch}: Push failed"
	fi

	fedpkg build
	exit_if_failed "$?" ${EXIT_ERROR_FAIL} "${branch}: Build failed"
    done
fi

##=== bodhi Start ===
## if bodhi is required
if [ -n "${BodhiPushList}" ];then
    print_status -t bodhi -s "Start"

    if [ $SpecRelease -eq 1 ];then
	BodhiType=enhancement
    else
	BodhiType=bugfix
    fi
    print_status " BodhiType=$BodhiType"

    print_status " Submit as new updates: $BodhiPushList"
    bodhi --new --type ${BodhiType} --user $FEDORA_USER --notes "Upstream update to ${Version}" --request testing $BodhiPushList 
    exit_if_failed "$?" ${EXIT_ERROR_FAIL} "bodhi: new update failed"

    ### Request buildroot override
    if [ "${Module}" != "zanata-client" ];then
	for pkgBuild in ${BodhiPushList};do
	    print_status " Request buildroot override: $pkgBuild"
	    bodhi --notes "Required as dependency of zanata" --duration 30 --buildroot-override $pkgBuild
	done

    fi
fi

echo_stderr "Done!"

