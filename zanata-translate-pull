#!/bin/bash -eu
shopt -s globstar
### NAME
###     zanata-translate-pull Download zanata translation.
###
### SYNOPSIS
###     zanata-translate-pull [Options] [<module>|<artifact> [<branch> [ZanataMvnOption]]]
###
### OPTIONS
###     -h: Show this help
###
###     -i: Interactive mode
###         It will pause before commit.
###
###     -j: Jenkins mode.
###         This assumes that current directory is <module> work directory.
###         and correct branch is checked out.
###
###     -p: Push after commit
###         Git push when it has commit.
###
### DESCRIPTION
###     This program performs branching chores for big releases of
###     zanata-client and zanata-server.
###

SCRIPT_DIR=$(dirname $(readlink  -q -f $0))
FUNCTION_SCRIPT_FILE=${SCRIPT_DIR}/zanata-functions
source "${FUNCTION_SCRIPT_FILE}"
trap exit_print_error EXIT
PROGRAM_NAME=$(basename $0)

##=== parsing Start ===
print_status -t parsing -s "Start"
Interactive=0
JenkinsMode=0
PushMode=0

while getopts "hijp" opt;do
    case $opt in
	h )
	    zanata_script_help $0
	    exit ${EXIT_OK}
	    ;;
	i )
	    Interactive=1
	    ;;
	j )
	    JenkinsMode=1
	    ;;
	p )
	    PushMode=1
	    ;;
	* )
	    failed ${EXIT_FATAL_INVALID_OPTIONS} "$opt"
	    ;;
    esac
done

shift $((OPTIND-1))

##=== prepare Start ===
print_status -t prepare  -s "Start"
## If not JenkinsMode, then checkout should be done here
if [ $JenkinsMode -eq 0 ];then
    ModuleResult=$(get_module_from_command ${1-})
    Module=$(sed -e 's/ .*//'<<<"$ModuleResult")
    if [[ $ModuleResult == *1 ]];then
	shift
    fi
    print_status " Module=$Module"

    ensure_repo ${Module}

    ## Determine branch
    if [ -n "${1-}" ];then
	Branch=$1
	shift
    else
	## Determine RELEASING_BRANCH
	Branch=$(get_releasing_branch $Module)
    fi
    print_status " Branch is $Branch"

    checkout_branch $Module "$Branch" $WORK_ROOT
    cd "$WORK_ROOT/$Module"
else
    Branch=$(git name-rev --name-only HEAD)
fi

##=== prepare Start ===
if [ ! -r zanata.xml ];then
    failed $EXIT_FATAL_MISSING_DEPENDNECY "zanata.xml does not exist."
fi

##=== translation update Start ===
print_status -t "translation update" -s "Start"
print_status " pull translation from Zanata"
mvn -B -e org.zanata:zanata-maven-plugin:pull -Dzanata.projectVersion=$Branch $@

print_status " Validate translation"
mvn -B -e com.googlecode.l10n-maven-plugin:l10n-maven-plugin:validate -pl zanata-war $@

if ! git diff --exit-code ;then
    if [ $Interactive -eq 1 ];then
	read -p "### Press [Ctrl-C] to break, [Enter] to continue"
    fi
    git add **/src/main/resources/**/*_*.properties
    git commit -m "trans(pull): Update translation"
    if [ $PushMode -ge 1 ];then
	git push
    else
	exit ${EXIT_RETURN_FALSE}
    fi
else
    print_status " No change detected"
fi
exit ${EXIT_OK}

